# Adjust the window width at the extremes
if (ages[i] <= min(ages) + 5 || ages[i] >= max(ages) - 5) {
adjusted_window_width <- window_width * 2
} else {
adjusted_window_width <- window_width
}
# Determine the neighbors within the window
neighbors <- which(distances <= adjusted_window_width)
# Tricube weight function within the window
tricube_weights <- (1 - (distances[neighbors] / adjusted_window_width) ^ 3) ^ 3
tricube_weights[distances[neighbors] > adjusted_window_width] <- 0
# Final weights
weights <- tricube_weights * inverse_variance[neighbors]
# Create the design matrix
X <- matrix(1, length(neighbors), degree + 1)
for (d in 1:degree) {
X[, d + 1] <- ages[neighbors] ^ d
}
# Weighted design matrix and response
WX <- sqrt(weights) * X
Wy <- sqrt(weights) * coefficients[neighbors]
# Solve the normal equations
beta <- solve(t(WX) %*% WX) %*% t(WX) %*% Wy
# Make the prediction
smoothed_coefficients[i] <- sum(beta * c(1, ages[i] ^ (1:degree)))
}
distances
neighbors <- which(distances <= adjusted_window_width)
neighbors
tricube_weights <- (1 - (distances[neighbors] / adjusted_window_width) ^ 3) ^ 3
tricube_weights
tricube_weights[distances[neighbors] > adjusted_window_width] <- 0
tricube_weights
weights <- tricube_weights * inverse_variance[neighbors]
weights
X
WX
WY
beta
dim(WX)
dim(WY)
dim(Wy)
Wy
length(Wy)
beta
load("~/Library/CloudStorage/Dropbox-Personal/pheno_dir/output/merged_pheno_censor_final_withdrugs_smoke.rds")
dat=dfh
df_ascvd=readRDS("~/multistate2//output/dfascvd_newbp.rds")
m=merge(dat,dfascvd[,c("sample_id","hdladj","choladj","sbp")],by.x = "identifier",by.y="sample_id")
modelfit=fitfunc2(data.table(m),ages = ages,nstates = nstates,mode = "binomial",covariates ="cad.prs+f.31.0.0+smoke+antihtn_now+statin_now+timeinstate")
fitfunc()
fitfunc
modelfit=fitfunc2(data.table(m),ages = ages,nstates = nstates,mode = "binomial",covariates ="cad.prs+f.31.0.0+smoke+antihtn_now+statin_now+yearsinstate")
coefplotsmooth(ages = 40:80,start = "Health",stop = "Cad",modelfit = modelfit)
library(dplyr)
library(reshape)
coefplotsmooth(ages = 40:80,start = "Health",stop = "Cad",modelfit = modelfit)
coefplotsmooth2(ages = 40:80,start = "Health",stop = "Cad",modelfit = modelfit,window_width = 20)
modelfit$model_list[[1]]
coefplotsmooth2(ages = 40:80,start = "Hypertension",stop = "Cad",modelfit = modelfit,window_width = 20)
coefplotsmooth2(ages = 40:80,start = "Ht",stop = "Cad",modelfit = modelfit,window_width = 20)
coefplotsmooth(ages = 40:80,start = "Ht",stop = "Cad",modelfit = modelfit,window_width = 20)
coefplotsmooth(ages = 40:80,start = "Ht",stop = "Cad",modelfit = modelfit)
coefplotsmooth
library(reshape)
coefplotsmooth(ages = 40:80,start = "Ht",stop = "Cad",modelfit = modelfit)
library(tidyr)
coefplotsmooth(ages = 40:80,start = "Ht",stop = "Cad",modelfit = modelfit)
mf=fitfunc2(data.table(m),ages = ages,nstates = nstates,mode = "binomial",covariates ="cad.prs+f.31.0.0+smoke+antihtn_now+statin_now")
coefplotsmooth(ages = 40:80,start = "Ht",stop = "Cad",modelfit = mf)
library(reshape)
detach("package:dplyr", unload = TRUE)
detach("package:tidyr", unload = TRUE)
library(reshape2)
library(dplyr)
coefplotsmooth(ages = 40:80,start = "Ht",stop = "Cad",modelfit = mf)
coefplotsmooth(ages = 40:80,start = "Ht",stop = "Cad",modelfit = modelfit)
coefplotsmooth(ages = 40:80,start = "Ht",stop = "Cad",modelfit = modelfit)+theme_classic()
coefplotsmooth(ages = 40:80,start = "Ht",stop = "Cad",modelfit = modelfit)+theme_classic()
coefplotsmooth(ages = 40:80,start = "Ht",stop = "Cad",modelfit = modelfit)$plot+theme_classic()
coefplotsmooth(ages = 40:80,start = "Ht",stop = "Cad",modelfit = modelfit)$plot+theme_classic()
coefplotsmooth(ages = 40:80,start = "Ht",stop = "Cad",modelfit = modelfit)$plot+theme_classic()+labs(color="coefficient")
c3=readRDS("~/Library/CloudStorage/Dropbox/c3longitudinal.rds")
c3=readRDS("~/Library/CloudStorage/Dropbox-Personal//c3longitudinal.rds")
dim(c3)
length(unique(c3$eid))
head(c3)
summary(c3$followlevel)
data=test
data$statin_age=as.numeric(data$statin_age)
# Categorize the ages
data$age_category <- case_when(
is.na(data$statin_age) ~ "Never",
data$statin_age < 45 ~ "<45",
data$statin_age >= 45 & data$statin_age < 55 ~ "45-55",
data$statin_age >= 55 & data$statin_age < 65 ~ "55-65",
data$statin_age >= 65 ~ ">65",
TRUE ~ as.character(data$statin_age) # catch-all for unexpected values
)
# Order the levels of the age_category factor
data$age_category <- factor(data$age_category, levels = c("Never", "<45", "45-55", "55-65", ">65"))
# Prepare data for plotting
plot_data <- data %>%
group_by(age_category) %>%
arrange(cad.prs) %>%
mutate(ecdf_val = ecdf(cad.prs)(cad.prs))
statage = ggplot(plot_data, aes(x = cad.prs, y = ecdf_val, color = age_category)) +
geom_step(size = 1.5) +  # Setting the line size for the plot
labs(title = "eCDF of PRS by Statin Start Age",
x = "PRS",
y = "eCDF",
color = "First Age (prescription or diagnosis)") + scale_color_aaas() +
theme_classic(base_size = 20) +
guides(color = guide_legend(override.aes = list(size = 1.5)))  # Setting the line size for the legend
ggplot(data,aes(x = cad.prs))+geom_boxplot()+facet_wrap(~age_category)
summary_df <- data %>%
group_by(age_category) %>%
summarize(
mean = mean(cad.prs),
median = median(cad.prs),
sd = sd(cad.prs),
min = min(cad.prs),
max = max(cad.prs)
)
summary_df
data <- data.frame(
age_category = c("young", "middle", "old", "young", "middle"),
cad.prs = c(10, 20, 30, 40, 50)
)
p <- ggplot(data, aes(x = age_category, y = cad.prs)) +
geom_boxplot() +
labs(title = "Boxplot of cad.prs by Age Category",
x = "Age Category", y = "cad.prs") +
theme_minimal()
print(p)
data=test
data$statin_age=as.numeric(data$statin_age)
# Categorize the ages
data$age_category <- case_when(
is.na(data$statin_age) ~ "Never",
data$statin_age < 45 ~ "<45",
data$statin_age >= 45 & data$statin_age < 55 ~ "45-55",
data$statin_age >= 55 & data$statin_age < 65 ~ "55-65",
data$statin_age >= 65 ~ ">65",
TRUE ~ as.character(data$statin_age) # catch-all for unexpected values
)
# Order the levels of the age_category factor
data$age_category <- factor(data$age_category, levels = c("Never", "<45", "45-55", "55-65", ">65"))
# Prepare data for plotting
plot_data <- data %>%
group_by(age_category) %>%
arrange(cad.prs) %>%
mutate(ecdf_val = ecdf(cad.prs)(cad.prs))
p <- ggplot(data, aes(x = age_category, y = cad.prs)) +
geom_boxplot() +
labs(title = "Boxplot of cad.prs by Age Category",
x = "Age Category", y = "cad.prs") +
theme_minimal()
print(p)
p <- ggplot(data[data$Cad_0_censor_age>55,], aes(x = age_category, y = cad.prs)) +
geom_boxplot() +
labs(title = "Boxplot of cad.prs by Age Category",
x = "Age Category", y = "cad.prs") +
theme_minimal()
print(p)
p <- ggplot(data[data$Cad_0_censor_age>60,], aes(x = age_category, y = cad.prs)) +
geom_boxplot() +
labs(title = "Boxplot of cad.prs by Age Category",
x = "Age Category", y = "cad.prs") +
theme_minimal()
print(p)
p <- ggplot(data[data$Cad_0_Any==1,], aes(x = age_category, y = cad.prs)) +
geom_boxplot() +
labs(title = "Boxplot of cad.prs by Age Category",
x = "Age Category", y = "cad.prs") +
theme_minimal()
print(p)
p <- ggplot(data[data$Cad_0_Any==2,], aes(x = age_category, y = cad.prs)) +
geom_boxplot() +
labs(title = "Boxplot of cad.prs by Age Category",
x = "Age Category", y = "cad.prs") +
theme_minimal()
print(p)
dim(dfh)
dum(dfh$Cad_0_Any==2)
mean(dfh$Cad_0_Any==2)
mean(dfh$Cad_0_Any==2&dfh$Cad_0_censor_age>40)
sum(dfh$Cad_0_Any==2&dfh$Cad_0_censor_age>40)
dim(dfh$Cad_0_Any==2&dfh$Cad_0_censor_age<40)
su(dfh$Cad_0_Any==2&dfh$Cad_0_censor_age<40)
sum(dfh$Cad_0_Any==2&dfh$Cad_0_censor_age<40)
sum(dfh$Cad_0_Any==2&dfh$Cad_0_censor_age>40)/(nrow(dfh)-1289)
0.59*(480638*0.59*0.59*(1-0.59))
0.59*(1-0.59)/480638*
0.59*(1-0.59)/480638
0.59*(1-0.59)/480638
(0.59*(1-0.59))/480638
library(dplyr)
library(ggplot2)
library(data.table)
library(ggsci)
test=readRDS("~/multistate2/output/test.rds")
pce.reverse.tenyear=readRDS("~/multistate2/output/pce.reverse.tenyear.rds")
ascvd.30.year=readRDS("~/multistate2/output/ascvd.30year.rds")
#ascvd.30.year.rc=readRDS("~/multistate2/output/ascvd.30year.rc.rds")
ascvd.30.year.rc=readRDS("~/multistate2/output/ascvd.30year.rcnew.rds")
### this is the data frame with approportiate score
prediction_list=readRDS("~/multistate2/output/state_occupancy_risk.rds")
ages=c(40:80)
# Initialize a list to store the results for each year
results_list <- list()
matrix2=pce.reverse.tenyear
colnames(matrix1)=colnames(matrix2)=ages[-length(ages)]
test=readRDS("~/multistate2/output/test.rds")
pce.reverse.tenyear=readRDS("~/multistate2/output/pce.reverse.tenyear.rds")
ascvd.30.year=readRDS("~/multistate2/output/ascvd.30year.rds")
#ascvd.30.year.rc=readRDS("~/multistate2/output/ascvd.30year.rc.rds")
ascvd.30.year.rc=readRDS("~/multistate2/output/ascvd.30year.rcnew.rds")
### this is the data frame with approportiate score
prediction_list=readRDS("~/multistate2/output/state_occupancy_risk.rds")
ages=c(40:80)
matrix2=pce.reverse.tenyear
colnames(matrix1)=colnames(matrix2)=ages[-length(ages)]
colnames(matrix2)=ages[-length(ages)]
rownames(matrix2)=test$identifier
for(year in 1:(length(ages)-1)){
threshold1=0.10
selected_indices_score1 <- which(sapply(prediction_list, function(x) {
if(length(x) >= year) x[year] > threshold1 else FALSE
}))
(0.028*(1-0.28))/480638
for(year in 1:(length(ages)-1)){
threshold1=0.10
selected_indices_score1 <- which(sapply(prediction_list, function(x) {
if(length(x) >= year) x[year] > threshold1 else FALSE
}))
data_score1 <- test[selected_indices_score1, ]
prop1=dim(data_score1)[1]/dim(test)
stats_score1 <- c(
mean_genetics = mean(data_score1$cad.prs, na.rm = TRUE),
percent_female = mean(data_score1$sex == "female", na.rm = TRUE) * 100,
percent_smoker = mean(data_score1$smoke, na.rm = TRUE) * 100,
mean_labs = colMeans(data_score1[, c("sbp","choladj","hdladj")], na.rm = TRUE),# replace with your lab columns
under_low=mean(data_score1[,"cad.prs.lev"]=="low")*prop1,
under_mid=mean(data_score1[,"cad.prs.lev"]=="mid")*prop1,
under_high=mean(data_score1[,"cad.prs.lev"]=="high")*prop1
)
threshold3=5
selected_indices_score3 <- which(matrix2[, year] > threshold3)
data_score3 <- test[selected_indices_score3, ]
prop3=dim(data_score3)[1]/dim(test)
stats_score3 <- c(
mean_genetics = mean(data_score3$cad.prs, na.rm = TRUE),
percent_female = mean(data_score3$sex == "female", na.rm = TRUE) * 100,
percent_smoker = mean(data_score3$smoke, na.rm = TRUE) * 100,
mean_labs = colMeans(data_score3[, c("sbp","choladj","hdladj")], na.rm = TRUE),
under_low=mean(data_score3[,"cad.prs.lev"]=="low")*prop3,
under_mid=mean(data_score3[,"cad.prs.lev"]=="mid")*prop3,
under_high=mean(data_score3[,"cad.prs.lev"]=="high")*prop3#place with your lab columns
)
selected_1_not3=setdiff(selected_indices_score1,selected_indices_score3)
data_score1_not3 <- test[selected_1_not3, ]
prop1not3=dim(data_score1_not3)[1]/dim(test)[1]
stats_score_1_not_3 <- c(
mean_genetics = mean(data_score1_not3$cad.prs, na.rm = TRUE),
percent_female = mean(data_score1_not3$sex == "female", na.rm = TRUE) * 100,
percent_smoker = mean(data_score1_not3$smoke, na.rm = TRUE) * 100,
mean_labs = colMeans(data_score1_not3[, c("sbp","choladj","hdladj")], na.rm = TRUE),
under_low=mean(data_score1_not3[,"cad.prs.lev"]=="low")*prop1not3,
under_mid=mean(data_score1_not3[,"cad.prs.lev"]=="mid")*prop1not3,
under_high=mean(data_score1_not3[,"cad.prs.lev"]=="high")*prop1not3# replace with your lab columns
)
selected_3_not1=setdiff(selected_indices_score3,selected_indices_score1)
data_score3_not1 <- test[selected_3_not1, ]
stats_score_3_not_1 <- c(
mean_genetics = mean(data_score3_not1$cad.prs, na.rm = TRUE),
percent_female = mean(data_score3_not1$sex == "female", na.rm = TRUE) * 100,
percent_smoker = mean(data_score3_not1$smoke, na.rm = TRUE) * 100,
mean_labs = colMeans(data_score3_not1[, c("sbp","choladj","hdladj")], na.rm = TRUE) # replace with your lab columns
)
selected_3_and1=intersect(selected_indices_score3,selected_indices_score1)
data_score3_and1 <- test[selected_3_and1, ]
stats_score_3_and_1 <- c(
mean_genetics = mean(data_score3_and1$cad.prs, na.rm = TRUE),
percent_female = mean(data_score3_and1$sex == "female", na.rm = TRUE) * 100,
percent_smoker = mean(data_score3_and1$smoke, na.rm = TRUE) * 100,
mean_labs = colMeans(data_score3_and1[, c("sbp","choladj","hdladj")], na.rm = TRUE) # replace with your lab columns
)
score1_and_score3 <- intersect(selected_indices_score1, selected_indices_score3)
# Unique to each score
only_score1 <- setdiff(selected_indices_score1, selected_indices_score3)
only_score3 <- setdiff(selected_indices_score3, selected_indices_score1)
only_score1_andsick=intersect(only_score1,which(test$Cad_0_Any==2))
only_score3_andsick=intersect(only_score3,which(test$Cad_0_Any==2))
both=intersect(selected_indices_score1,selected_indices_score3)
both_andsick=intersect(both,which(test$Cad_0_Any==2))
# Counts
counts <- list(
only_score1 = length(only_score1),
only_score1_andsick=length(only_score1_andsick),
only_score3 = length(only_score3),
only_score3_andsick=length(only_score3_andsick),
score1_and_score3 = length(intersect(selected_indices_score1,selected_indices_score3)),
both_andsick=length(both_andsick))
# Store results for this year
results_list[[year]] <- list(
stats_score1=stats_score1,
stats_score3=stats_score3,
stats_score_3_not_1=stats_score_3_not_1,
stats_score_1_not_3=stats_score_1_not_3,
stats_score_3_and_1=stats_score_3_and_1,
counts=counts
)
}
stats1=lapply(results_list, function(x) x$stats_score1)
df_ms <- data.frame(do.call(rbind, stats1))
stats3=lapply(results_list, function(x) x$stats_score3)
df_ten <- data.frame(do.call(rbind, stats3))
stats1not3=lapply(results_list, function(x) x$stats_score_1_not_3)
df_ms_ten <- data.frame(do.call(rbind, stats1not3))
prsnums=data.frame(ages[-41],df_ms_ten[,c(7:9)])
colnames(prsnums)=c("Age","Low","Int","High")
p=melt(prsnums,id.vars="Age")
p$variable=factor(p$variable,levels=c("Low","Int","High"),labels=c("Low","Intermediate","High"))
levels(p$variable)[1]="Low"
levels(p$variable)[2]="Intermediate"
levels(p$variable)[3]="High"
g=ggplot(p,aes(x = Age,y = value,group=variable,fill=variable ))+geom_bar(stat="identity")+labs(x="Age",y="Proportion PCE-10yr <5% and MSGene-lifetime > 10%",fill="Genomic Risk Level")+theme_classic(base_size = 15)+scale_fill_aaas()
g
#install.packages(c("ggplot2", "dplyr", "tidyr"))
library(ggplot2)
library(dplyr)
library(tidyr)
# Example data
# Let's say the matrices are named matrix1 and matrix2
# These matrices have columns: Year, MeanRisk, PercentFemale, Smoker, SBP, LDL, HDL
# And they have 40 rows for 40 years
# Convert matrices to data frames
df1 <- as.data.frame(df_ms)
df2 <- as.data.frame(df_ten)
df3 = as.data.frame(df_ms_ten)
# Add a Score column to each
df1$Score <- "MSGene LT"
df2$Score <- "PCE 10y"
df3$Score <- "MSGene not PCE"
df1$Year=c(40:79)
df2$Year=c(40:79)
df3$Year=c(40:79)
# Combine the two data frames
df <- rbind(df1, df2,df3)
all_counts <- lapply(results_list, function(x) x$counts)
all_counts
# Convert this list to a data frame suitable for UpSetR
df <- data.frame(do.call(rbind, all_counts))
df_c=df[,c("only_score1_andsick","only_score3_andsick","both_andsick")]
colnames(df_c)=c("MSlife","PCETeny","Both")
df
d=data.frame(t(apply(df_c,1,function(x){as.numeric(x)})))
d=data.frame(t(apply(d,1,function(x){x/sum(test$Cad_0_Any==2)})))
d$ages=ages[1:40]
colnames(d)=c("MSGene LT>10% Only","PCE 10y>5% Only","Both","ages")
m=melt(d,id.var="ages")
m
m$sd=sqrt((m$value*(1-m$value))/sum(test$Cad_0_Any==2))
head(m)
m
library(ggplot2)
library(ggridges)
untreated=readRDS("../output/predictedrsiskboot_fixed.rds")
treated=readRDS("../output/predictedrsiskboot_fixed_benefit.rds")
tenun=readRDS("../output/predictedrsiskboot_fixed_ten.rds")
# Assuming `array1` is predicted risk and `array2` is risk under treatment
diff_array <- untreated[,,,] - treated[,,,]
#diff_array <- untreated[,c(1:20),,] - treated[,c(1:20),,]
## high risk male not on AH at 40 vs 79
colMeans(diff_array[,10,"40",]);
colMeans(diff_array[,10,"79",])
df <- as.data.frame(as.table(apply(diff_array, c(3,4), mean)))
dfs <- as.data.frame(as.table(apply(diff_array, c(3,4), sd)))
df
df[df$Var1=="40",]
df[df$Var1=="79",]
median(df[df$Var1==40,"Freq"])
sd(df[df$Var1==40,"Freq"])
median(df[df$Var1==79,"Freq"])
sd(df[df$Var1==79,"Freq"])
IQR(df[df$Var1==79,"Freq"])
summary(df[df$Var1==79,"Freq"])
IQR(df[df$Var1==40,"Freq"])
mean(df[df$Var1==40,"Freq"])
mean(df[df$Var1==40,"Freq"])
IQR(df[df$Var1==40,"Freq"])
sd(df[df$Var1==40,"Freq"])
mean(df[df$Var1==40,"Freq"])+1.96*sd(df[df$Var1==40,"Freq"])
mean(df[df$Var1==40,"Freq"])-1.96*sd(df[df$Var1==40,"Freq"])
mean(df[df$Var1==79,"Freq"])+1.96*sd(df[df$Var1==79,"Freq"])
mean(df[df$Var1==49,"Freq"])-1.96*sd(df[df$Var1==79,"Freq"])
mean(df[df$Var1==79,"Freq"])+1.96*sd(df[df$Var1==79,"Freq"])
mean(df[df$Var1==79,"Freq"])-1.96*sd(df[df$Var1==79,"Freq"])
mean(df[df$Var1==79,"Freq"])
IQR(df[df$Var1==79,"Freq"])
sd(df[df$Var1==79,"Freq"])
mean(df[df$Var1==79,"Freq"])+1.96*sd(df[df$Var1==79,"Freq"])
mean(df[df$Var1==79,"Freq"])-1.96*sd(df[df$Var1==79,"Freq"])
head(dat)
head(g2)
nstates=c("Health", "Ht","HyperLip","Dm","Cad","death","Ht&HyperLip","HyperLip&Dm","Ht&Dm","Ht&HyperLip&Dm")
gpc=readRDS("~/Library/CloudStorage/Dropbox-Personal//ukbb-ehr-data/data/gp_event.rds")
g2=gpc[!duplicated(gpc$eid),]
dim(g2)
a=readRDS("../output/fortable1.rds")
dim(a)
summary(a$Durationfollowed)
mean(dfh$Cad_0_Any==2&dfh$Cad_0_censor_age<40)
sum(dfh$Death_Censor_Age<90&dfh$Death_censor_Any==2)
mean(dfh$Death_Censor_Age<90&dfh$Death_censor_Any==2)
states
cr=readRDS("~/multistate2/output/cr3.rds")
h=apply(s[,,c(1:10)],3,function(x){colSums(t(x))})
s=statusarray(df_frame = data.table(test),ages = ages,nstates = nstates)
source("../code/arrayindicate.R")
s=statusarray(df_frame = data.table(test),ages = ages,nstates = nstates)
s2=s[c(1:40),,c(1,2,3,4,7,8,9,10)]
head(s2)
s2
s2[40,,"Health"]
sum(s2[40,,"Health"])
mean(s2["40",,"Health"])
mean(s2["40",,"Ht"])
mean(s["40",,"Cad"])
mean(s2["76",,"Health"])
h=apply(s[,,c(1:10)],3,function(x){colSums(t(x))})
h=apply(h,1,function(x){x/sum(x)})
h=t(h)
h
mean(a$agerec)
median(a$agerec)
median(a$Durationfollowed)
IQR(a$Durationfollowed)
IQR(a$Durationfollowed[a$agerec>18])
head(dfh)
update_atrisk_for_state = function(atrisk, df_frame, state, age) {
# Get the censor age for the current state
censor_age_column = paste0(state, "_0_censor_age")
censor_age = df_frame[df_frame$state == state, censor_age_column][1]
# Update the atrisk data frame by filtering individuals based on age and censor age
filtered_df = df_frame[df_frame$state == state & df_frame$age_censored < age & df_frame$age >= censor_age, ]
atrisk = rbind(atrisk, filtered_df)
return(atrisk)
}
update_atrisk_for_state = function(atrisk, df_frame, state, age) {
# Define the condition based on the state
condition_column = paste0(state, "_0_Any")
# Update the atrisk data frame by filtering individuals based on age, censor age, and state
filtered_df = df_frame[df_frame$age_censored < age & df_frame$age >= df_frame[paste0(state, "_0_censor_age")] & df_frame[, condition_column] == 2, ]
atrisk = rbind(atrisk, filtered_df)
return(atrisk)
}
update_atrisk_for_state(df_frame = dfh,atrisk = update_atrisk_for_state = function(atrisk, df_frame, current_state, age, states_to_exclude) {
update_atrisk_for_state = function(atrisk, df_frame, current_state, age, states_to_exclude) {
# Define the condition column for the current state
condition_column = paste0(current_state, "_0_Any")
# Create a list of conditions for states to exclude
exclude_conditions = sapply(states_to_exclude, function(state) {
paste0("!any(df_frame$age_censored < age &",
"df_frame$age >= df_frame[paste0('", state, "_0_censor_age')] &",
"df_frame$", state, "_0_Any == 2),")
})
# Concatenate the exclude conditions to form the final filter condition
filter_condition = paste0("df_frame$age_censored < age &",
"df_frame$age >= df_frame[paste0('", current_state, "_0_censor_age')] &",
"df_frame$", condition_column, " == 2 &", exclude_conditions)
# Update the atrisk data frame in place
atrisk = atrisk[eval(parse(text = filter_condition)), ]
return(atrisk)
}
# Define a function to create the atrisk data frame for a specific state and age
create_atrisk_for_state = function(df_frame, current_state, age, states_to_exclude) {
# Define the condition column for the current state
condition_column = paste0(current_state, "_0_Any")
# Create a list of conditions for states to exclude
exclude_conditions = sapply(states_to_exclude, function(state) {
paste0("!any(df_frame$age_censored < age &",
"df_frame$age >= df_frame[paste0('", state, "_0_censor_age')] &",
"df_frame$", state, "_0_Any == 2),")
})
# Concatenate the exclude conditions to form the final filter condition
filter_condition = paste0("df_frame$age_censored < age &",
"df_frame$age >= df_frame[paste0('", current_state, "_0_censor_age')] &",
"df_frame$", condition_column, " == 2 &", exclude_conditions)
# Create the atrisk data frame based on the filter condition
atrisk = df_frame[eval(parse(text = filter_condition)), ]
return(atrisk)
}
create_atrisk_for_state(df_frame = dfh,current_state = "Ht",age = 50,states_to_exclude = c("Dm","HyperLip","Cad","Death")
)
gp=readRDS("~/Desktop/output_gp/merged_censor.rds")
head(dfh)
cv=read.csv("~/Downloads/MGBB53k_CHIP_return/MGBB_53k_WES_CHIP_calls_20Mar2023.csv")
head(cv)
r=fread("~/Library/CloudStorage/Dropbox-PartnersHealthCare//cathproject/allpatients_phenotype.csv")
library(data.table)
r=fread("~/Library/CloudStorage/Dropbox-PartnersHealthCare//cathproject/allpatients_phenotype.csv")
r$pid=as.numeric(as.character(r$pid))
head(r)
dim(r)
library(data.table)
ll=fread("~/Dropbox (Partners HealthCare)/cathproject/linked_lesions.csv")
dim(ll)
library(data.table)
ll=fread("~/Dropbox (Partners HealthCare)/cathproject/linked_lesions.csv")
ll=fread("~/Dropbox (Partners HealthCare)/cathproject/linked_lesions.csv")
