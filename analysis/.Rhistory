score3=pce.reverse.tenyear
rownames(score3)=df$identifier
# Removing the bad IDs from score1_list
score1_list <- score1_list[-bad_indices]
df=df[-which(df$Cad_0_censor_age>=80&df$Cad_0_Any==1),]
dim(df)
# Removing the bad IDs from score2 dataframe
score2 <- score2[-bad_indices, ]
# Removing the bad IDs from score2 dataframe
score3 <- score3[-bad_indices, ]
all.equal(as.numeric(names(score1_list)),as.numeric(df$identifier))
g3 <- ggplot(mer[mer$Age %in% c(40,50,60,70),], aes(`Lifetime`, y = `Net Ben`, ymin = `Net Ben` - 0.001, ymax = `Net Ben` + 0.001, color = `PRS Category`, group = `Age`)) +
geom_point() +
geom_pointrange() +
geom_line(size = 1.5) +
facet_wrap(~Age, nrow = 4) +
theme_classic(base_size = 20) +
labs(x = "MS Predicted Lifetime Risk", y = NULL, color = "PRS Percentile")  # Here's the modification
source("~/multistate2//code/smoothtest.R")
source("~/multistate2//code/newsmooth.R")
source("~/multistate2/code/fitarray.R")
library("reshape2")
source("~/multistate2/code/arrayindicate.R")
source("~/multistate2//code/utils.R")
source("~/multistate2/code/frs30_URBUT/fun.frs_30ynew.R")
source("~/multistate2/code/plotting_code.R")
detach("package:plyr", unload = TRUE)
load("~/Library/CloudStorage/Dropbox-Personal///pheno_dir/output/merged_pheno_censor_final_withdrugs_smoke.rds")
dfh$cad.prs.lec=cut(dfh$cad.prs,breaks = c(-5,-0.84,0.84,5),labels = c("low","mid","high"))
dfh$int=interaction(dfh$f.31.0.0,dfh$cad.prs.lec)
# Relabel the levels of the interaction variable
levels(dfh$int) <- c(1,2,3,4,5,6)
train=dfh[1:(nrow(dfh)*0.80),]
dfascvd=readRDS("~/multistate2//output/dfascvd_newbp.rds")
test=dfh[!(dfh$identifier%in%train$identifier),]
test=merge(test,dfascvd[,-which(names(dfascvd)%in%c("age","anylipidmed0","bp_med2","smoke"))],by.x="identifier",by.y="sample_id")
modelfit=fitfunc2(data.table(train),ages = ages,nstates = nstates,mode = "binomial",covariates ="cad.prs+f.31.0.0+smoke+antihtn_now+statin_now")
ages=40:80
modelfit=fitfunc2(data.table(train),ages = ages,nstates = nstates,mode = "binomial",covariates ="cad.prs+f.31.0.0+smoke+antihtn_now+statin_now")
source("~/multistate2//code/smoothtest.R")
source("~/multistate2//code/newsmooth.R")
source("~/multistate2/code/fitarray.R")
library("reshape2")
source("~/multistate2/code/arrayindicate.R")
source("~/multistate2//code/utils.R")
source("~/multistate2/code/frs30_URBUT/fun.frs_30ynew.R")
source("~/multistate2/code/plotting_code.R")
detach("package:plyr", unload = TRUE)
load("~/Library/CloudStorage/Dropbox-Personal///pheno_dir/output/merged_pheno_censor_final_withdrugs_smoke.rds")
dfh$cad.prs.lec=cut(dfh$cad.prs,breaks = c(-5,-0.84,0.84,5),labels = c("low","mid","high"))
dfh$int=interaction(dfh$f.31.0.0,dfh$cad.prs.lec)
# Relabel the levels of the interaction variable
levels(dfh$int) <- c(1,2,3,4,5,6)
train=dfh[1:(nrow(dfh)*0.80),]
dfascvd=readRDS("~/multistate2//output/dfascvd_newbp.rds")
test=dfh[!(dfh$identifier%in%train$identifier),]
test=merge(test,dfascvd[,-which(names(dfascvd)%in%c("age","anylipidmed0","bp_med2","smoke"))],by.x="identifier",by.y="sample_id")
ages = c(40:80)
nstates = c(
"Health",
"Ht",
"HyperLip",
"Dm",
"Cad",
"death",
"Ht&HyperLip",
"HyperLip&Dm",
"Ht&Dm",
"Ht&HyperLip&Dm"
)
ages=40:80
modelfit=fitfunc2(data.table(train),ages = ages,nstates = nstates,mode = "binomial",covariates ="cad.prs+f.31.0.0+smoke+antihtn_now+statin_now")
b=coefplotsmooth2(ages = ages,start = "Health",stop = "Cad",modelfit = modelfit,window_width = 20,span = 0.75,degree = 2)
coefs=b$custom_smooth
prs_quants=qnorm(c(seq(0.1,0.9,by=0.1)))
prs_quants=c(-2:2)
sex=c(0,1)
atrisk=expand.grid(intercept=1,prs_quants=prs_quants,sex=sex,smoke=c(0,1),ah=c(0,1),stat=c(0,1))
ar=atrisk[atrisk$ah==0&atrisk$smoke==0&atrisk$stat==0,]
agesint=seq(40,70,by=5)
tenlifarray=array(NA,dim=c(length(agesint),nrow(ar),4))
dimnames(tenlifarray)=list(agesint,levels(interaction(prs_quants,sex)),c("Ten","Lifetime","TenBenefit","LifetimeBenefit"))
for(g in 1:length(agesint)){
age=agesint[g]
tenlifarray[g,,1]=compute_prediction_product_matrix(atrisk = ar,agepredinterval = age:(age+10),coefmat = coefs,RR = 0.80)$PredictedIntervalrisk
tenlifarray[g,,2]=compute_prediction_product_matrix(atrisk = ar,agepredinterval = age:80,coefmat = coefs,RR = 0.80)$PredictedIntervalrisk
tenlifarray[g,,3]=compute_prediction_product_matrix(atrisk = ar,agepredinterval = age:(age+10),coefmat = coefs,RR = 0.80)$Hazard_treated
tenlifarray[g,,4]=compute_prediction_product_matrix(atrisk = ar,agepredinterval = age:80,coefmat = coefs,RR = 0.80)$Hazard_treated
}
netben=tenlifarray[,,"Lifetime"]-tenlifarray[,,"LifetimeBenefit"]
ben=melt(netben)
ben2=melt(tenlifarray[,c(6:10),"LifetimeBenefit"])
ten=melt(tenlifarray[,c(6:10),"Ten"])
l=melt(tenlifarray[,c(6:10),"Lifetime"])
mer=merge(ten,l,by=c("Var1","Var2"))
head(tenlifarray)
netben=tenlifarray[,,"Lifetime"]-tenlifarray[,,"LifetimeBenefit"]
ben=melt(netben)
library(reshape2)
netben=tenlifarray[,,"Lifetime"]-tenlifarray[,,"LifetimeBenefit"]
ben=melt(netben)
head(ben)
detach("package:reshape", unload = TRUE)
netben=tenlifarray[,,"Lifetime"]-tenlifarray[,,"LifetimeBenefit"]
ben=melt(netben)
netben=tenlifarray[,,"Lifetime"]-tenlifarray[,,"LifetimeBenefit"]
ben=melt(netben)
ben2=melt(tenlifarray[,c(6:10),"LifetimeBenefit"])
ten=melt(tenlifarray[,c(6:10),"Ten"])
l=melt(tenlifarray[,c(6:10),"Lifetime"])
mer=merge(ten,l,by=c("Var1","Var2"))
mer=merge(mer,ben,by=c("Var1","Var2"))
# colnames(mer)=c("Age","PRS Category","Ten Year","Lifetime","Net Ben")
# mer$`PRS Category`=factor(mer$`PRS Category`,labels = c(0.01,seq(0.1,0.9,by=0.1),0.99))
# mermelt=melt(mer,id.vars=c("Age","PRS Category"))
colnames(mer)=c("Age","PRS Category","Ten Year","Lifetime","Net Ben")
mer$`PRS Category`=factor(mer$`PRS Category`,labels = -2:2)
mermelt=melt(mer,id.vars=c("Age","PRS Category"))
tenlifarray[,c("2.1","-2.1"),"Ten"]
netben[,c("2.1","-2.1")]
## dot point
g2=ggplot(mer,aes(`Ten Year`*100,y = `Net Ben`*100,ymin=`Net Ben`+0.1,ymax=`Net Ben`+0.1,color=`PRS Category`,group=`Age`))+geom_point()+geom_pointrange()+geom_line(size=1.5)+theme_classic(base_size = 20)+labs(x="MS Predicted Ten Year Risk (%)",y="MS Lifetime Benefit (% ARR)",color="PRS Percentile")
g2
g3 <- ggplot(mer[mer$Age %in% c(40,50,60,70),], aes(`Lifetime`, y = `Net Ben`, ymin = `Net Ben` - 0.001, ymax = `Net Ben` + 0.001, color = `PRS Category`, group = `Age`)) +
geom_point() +
geom_pointrange() +
geom_line(size = 1.5) +
facet_wrap(~Age, nrow = 4) +
theme_classic(base_size = 20) +
labs(x = "MS Predicted Lifetime Risk", y = NULL, color = "PRS Percentile")  # Here's the modification
g3
benefit=readRDS("../output/benefit.rds")
getwd()
setwd("~/multistate2/")
benefit=readRDS("../output/benefit.rds")
setwd("~/multistate2/analysis/")
benefit=readRDS("../output/benefit.rds")
benefit
mg=ggplot(mer[mer$Age%in%c(40,50,60,70),],aes(`Lifetime`*100,y = 100*`Net Ben`,ymin=100*`Net Ben` -0.1,ymax=100*`Net Ben`+0.1,color=`PRS Category`,group=`Age`))+geom_point()+geom_pointrange()+geom_line(size=1.5)+facet_wrap(~Age,nrow =4)+theme_classic(base_size = 20)+labs(x="MS Predicted Lifetime Risk (%)",y="MS Lifetime Benefit (% ARR)",color="PRS Percentile")
mg
mg=ggplot(mer[mer$Age%in%c(40,50,60,70),],aes(`Lifetime`*100,y = 100*`Net Ben`,ymin=100*`Net Ben` -0.1,ymax=100*`Net Ben`+0.1,color=`PRS Category`,group=`Age`))+geom_point()+geom_pointrange()+geom_line(size=1.5)+facet_wrap(~Age,nrow =4)+theme_classic(base_size = 20)+labs(x="MS Predicted Lifetime Risk (%)",y="MS Lifetime Benefit (% ARR)",color="PRS Percentile")
mg
untreated=readRDS("output/predictedrsiskboot_fixed.rds")
setwd("~/multistate2/")
untreated=readRDS("output/predictedrsiskboot_fixed.rds")
treated=readRDS("output/predictedrsiskboot_fixed_benefit.rds")
# Assuming `array1` is predicted risk and `array2` is risk under treatment
diff_array <- untreated[,c(6:10),,] - treated[,c(6:10),,]
# Calculate mean and SD across bootstraps
mean_diff <- apply(diff_array, c(2,3,4), mean)
sd_diff <- apply(diff_array, c(2,3,4), sd)
Melt the array to a dataframe for ggplot2
ggplot(df, aes(x = Var2, y = Var3, fill = Freq)) +
geom_tile() +
scale_fill_viridis() +
theme_minimal() +
labs(x = "Years", y = "Risk States", fill = "Mean Difference")
library(ggplot2)
ggplot(df, aes(x = Var2, y = Var3, fill = Freq)) +
geom_tile() +
scale_fill_viridis() +
theme_minimal() +
labs(x = "Years", y = "Risk States", fill = "Mean Difference")
library(ggsci)
ggplot(df, aes(x = Var2, y = Var3, fill = Freq)) +
geom_tile() +
scale_fill_viridis() +
theme_minimal() +
labs(x = "Years", y = "Risk States", fill = "Mean Difference")
library(viridis)
library(viridis)
ggplot(df, aes(x = Var2, y = Var3, fill = Freq)) +
geom_tile() +
scale_fill_viridis() +
theme_minimal() +
labs(x = "Years", y = "Risk States", fill = "Mean Difference")
head(df)
# Calculate mean and SD across bootstraps
mean_diff <- apply(diff_array, c(2,3,4), mean)
sd_diff <- apply(diff_array, c(2,3,4), sd)
# Melt the array to a dataframe for ggplot2
df <- as.data.frame(as.table(mean_diff))
head(df)
library(viridis)
ggplot(df, aes(x = Var2, y = Var3, fill = Freq)) +
geom_tile() +
scale_fill_viridis() +
theme_minimal() +
labs(x = "Years", y = "Risk States", fill = "Mean Difference")
head(mean_diff)
head(sd_diff)
head(df)
ggplot(df, aes(x = Freq, y = as.factor(Var1), fill = ..x..)) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +
theme_ridges() +
labs(x = "Mean Difference in Risk", y = "Years")
library(ggridges)
ggplot(df, aes(x = Freq, y = as.factor(Var1), fill = ..x..)) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +
theme_ridges() +
labs(x = "Mean Difference in Risk", y = "Years")
library(ggplot2)
library(ggridges)
untreated=readRDS("../output/predictedrsiskboot_fixed.rds")
setwd("analysis/")
library(ggplot2)
library(ggridges)
untreated=readRDS("../output/predictedrsiskboot_fixed.rds")
treated=readRDS("../output/predictedrsiskboot_fixed_benefit.rds")
tenun=readRDS("../output/predictedrsiskboot_fixed_ten.rds")
# Assuming `array1` is predicted risk and `array2` is risk under treatment
diff_array <- untreated[,,,] - treated[,,,]
#diff_array <- untreated[,c(1:20),,] - treated[,c(1:20),,]
## high risk male not on AH at 40 vs 79
colMeans(diff_array[,10,"40",]);
colMeans(diff_array[,10,"79",])
df <- as.data.frame(as.table(apply(diff_array, c(3,4), mean)))
dfs <- as.data.frame(as.table(apply(diff_array, c(3,4), sd)))
ggplot(df, aes(x = Freq, y = as.factor(Var1), fill = ..x..)) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +
theme_ridges() +
labs(x = "Mean Difference in Risk", y = "Years")
```{r}
untreated=readRDS("output/predictedrsiskboot_fixed.rds")
setwd("../")
untreated=readRDS("output/predictedrsiskboot_fixed.rds")
treated=readRDS("output/predictedrsiskboot_fixed_benefit.rds")
# Assuming `array1` is predicted risk and `array2` is risk under treatment
diff_array <- untreated[,c(6:10),,] - treated[,c(6:10),,]
# Calculate mean and SD across bootstraps
mean_diff <- apply(diff_array, c(2,3,4), mean)
sd_diff <- apply(diff_array, c(2,3,4), sd)
# Melt the array to a dataframe for ggplot2
df <- as.data.frame(as.table(mean_diff))
df <- as.data.frame(as.table(apply(diff_array, c(3,4), mean)))
dfs <- as.data.frame(as.table(apply(diff_array, c(3,4), sd)))
ggplot(df, aes(x = Freq, y = as.factor(Var1), fill = ..x..)) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +
theme_ridges() +
labs(x = "Mean Difference in Risk", y = "Years")
setwd("./analysis/")
library(ggplot2)
library(ggridges)
untreated=readRDS("../output/predictedrsiskboot_fixed.rds")
treated=readRDS("../output/predictedrsiskboot_fixed_benefit.rds")
tenun=readRDS("../output/predictedrsiskboot_fixed_ten.rds")
# Assuming `array1` is predicted risk and `array2` is risk under treatment
diff_array <- untreated[,,,] - treated[,,,]
#diff_array <- untreated[,c(1:20),,] - treated[,c(1:20),,]
## high risk male not on AH at 40 vs 79
colMeans(diff_array[,10,"40",]);
colMeans(diff_array[,10,"79",])
df <- as.data.frame(as.table(apply(diff_array, c(3,4), mean)))
dfs <- as.data.frame(as.table(apply(diff_array, c(3,4), sd)))
dfu <- as.data.frame(as.table(apply(untreated[,c(6:10),,], c(2,3), mean)))
df2 <- as.data.frame(as.table(apply(diff_array[,c(6:10),,], c(2,3), mean)))
dft = as.data.frame(as.table(apply(tenun[,c(6:10),,], c(2,3), mean)))
mer=merge(dfu,df2,by=c("Var1","Var2"))
mtr=merge(dft,df2,by=c("Var1","Var2"))
mg=ggplot(mer[mer$Var2%in%c(40,50,60,70),],aes(Freq.x,Freq.y,col=Var1,group=Var2))+geom_line(size=1)+geom_point()+
facet_wrap(~Var2,nrow=4,ncol=1)+
labs(x="Projected Lifetime Risk",y="Absolute Risk Reduction")+
theme_classic(base_size = 20)
mtr$Var1=factor(mtr$Var1,levels = c("A","B","C","D","E"),labels=c(-2:2))
mt=ggplot(mtr[mtr$Var2%in%c(40,50,60,70),],aes(Freq.x,Freq.y,col=Var1,group=Var2))+
geom_line(size=1)+
geom_point()+
labs(x="Projected Ten Year Risk",y="Absolute Risk Reduction",col="PRS SD")+
theme_classic(base_size = 20)
ggsave(mt,file="../output/projectedtenvb.pdf",dpi=600)
saveRDS(mt,file="../output/projectedtenvb.rds")
saveRDS(mg,file="../output/projectedlifetimerisk.rds")
ggsave(mg,file="../output/projectedlifetimerisk.pdf",dpi=600)
median(df[df$Var1==40,"Freq"])
mean(df[df$Var1==40,"Freq"])
IQR(df[df$Var1==40,"Freq"])
sd(df[df$Var1==40,"Freq"])
mean(df[df$Var1==40,"Freq"])+1.96*sd(df[df$Var1==40,"Freq"])
mean(df[df$Var1==40,"Freq"])-1.96*sd(df[df$Var1==40,"Freq"])
mean(df[df$Var1==79,"Freq"])
IQR(df[df$Var1==79,"Freq"])
sd(df[df$Var1==79,"Freq"])
mean(df[df$Var1==79,"Freq"])+1.96*sd(df[df$Var1==79,"Freq"])
mean(df[df$Var1==79,"Freq"])-1.96*sd(df[df$Var1==79,"Freq"])
ggplot(df, aes(x = Freq, y = as.factor(Var1), fill = ..x..)) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +
theme_ridges() +
labs(x = "Mean Difference in Risk", y = "Years")
untreated=readRDS("../output/predictedrsiskboot_fixed.rds")
treated=readRDS("../output/predictedrsiskboot_fixed_benefit.rds")
untreated=readRDS("../output/predictedrsiskboot_fixed.rds")
treated=readRDS("../output/predictedrsiskboot_fixed_benefit.rds")
# Calculate mean and SD across bootstraps
mean_diff <- apply(diff_array, c(2,3,4), mean)
sd_diff <- apply(diff_array, c(2,3,4), sd)
df <- as.data.frame(as.table(mean_diff))
untreated=readRDS("../output/predictedrsiskboot_fixed.rds")
treated=readRDS("../output/predictedrsiskboot_fixed_benefit.rds")
# Calculate mean and SD across bootstraps
mean_diff <- apply(diff_array, c(2,3,4), mean)
sd_diff <- apply(diff_array, c(2,3,4), sd)
# Melt the array to a dataframe for ggplot2
df <- as.data.frame(as.table(mean_diff))
# Assuming `array1` is predicted risk and `array2` is risk under treatment
diff_array <- untreated[,,,] - treated[,,,]
untreated=readRDS("../output/predictedrsiskboot_fixed.rds")
treated=readRDS("../output/predictedrsiskboot_fixed_benefit.rds")
# Assuming `array1` is predicted risk and `array2` is risk under treatment
diff_array <- untreated[,,,] - treated[,,,]
#diff_array <- untreated[,c(1:20),,] - treated[,c(1:20),,]
df <- as.data.frame(as.table(apply(diff_array, c(3,4), mean)))
ggplot(df, aes(x = Freq, y = as.factor(Var1), fill = ..x..)) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +
theme_ridges() +
labs(x = "Mean Difference in Risk", y = "Years")
ggplot(df, aes(x = Freq*100, y = as.factor(Var1), fill = ..x..)) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +
theme_ridges() +
labs(x = "Mean Difference in Risk", y = "Years")
head(df_expanded)
library("ggsci")
library(dplyr)
library(tidyr)
library(data.table)
library(ggplot2)
library(ggpubr)
test=readRDS("~/multistate2/output/test.rds")
pce.reverse.tenyear=readRDS("~/multistate2/output/pce.reverse.tenyear.rds")
ascvd.30.year=readRDS("~/multistate2/output/ascvd.30year.rds")
#ascvd.30.year.rc=readRDS("~/multistate2/output/ascvd.30year.rc.rds")
ascvd.30.year.rc=readRDS("~/multistate2/output/ascvd.30year.rcnew.rds")
#head(pce.reverse.tenyear)
agesint=c(40:80)
thresh=5;
ten=apply(pce.reverse.tenyear,1,function(x){min(agesint[x>thresh])})
thresh=10;
thirty=apply(ascvd.30.year.rc,1,function(x){
w=which(x>thresh)
ifelse(length(w)>0,min(agesint[w]),100)})
### this is the data frame with approportiate score
states=readRDS("~/multistate2/output/state_occupancy_risk.rds")
ages=c(40:80)
thresh=0.10;
t=sapply(1:length(states),function(x){w=which(states[[x]]>thresh);ifelse(length(w)>0,min(ages[w]),100)})
df=data.frame("id"=test$identifier,"Cad_0_Any"=test$Cad_0_Any,"Cad_0_censor_age"=test$Cad_0_censor_age,"sex"=test$f.31.0.0,"prs"=test$cad.prs,"ten"=ten,"thirty"=thirty,"ms"=t,"enroll"=test$phenos.enrollment)
data <- data.frame(t_val = t)
# Create the ggplot histogram
p <- ggplot(data, aes(x = t_val)) +
geom_histogram(bins = length(ages) - 1, fill = "red3", color = "black", alpha = 0.7, aes(y =after_stat(density))) +
labs(title = "Histogram of Age Exceeding Risk: MSGene Lifetime",
x = "Age Exceeded",
y = "Density")+theme_classic()+lims(y=c(0,0.30))
data <- data.frame(t_val = ten)
# Create the ggplot histogram
p2 <- ggplot(data, aes(x = t_val)) +
geom_histogram(bins = length(ages) - 1, fill = "darkblue", color = "black", alpha = 0.7, aes(y =after_stat(density))) +
labs(title = "Histogram of Age Exceeding Risk: Ten-year (Pooled Cohort Equation)",
x = "Age Exceeded",y = "Density")+theme_classic()+xlim(39,80)+lims(y=c(0,0.30))
data <- data.frame(t_val = thirty)
# Create the ggplot histogram
p3 <- ggplot(data, aes(x = t_val)) +
geom_histogram(bins = length(ages) - 1, fill = "darkgreen", color = "black", alpha = 0.7, aes(y =after_stat(density))) +
labs(title = "Histogram of Age Exceeding Risk: 30-year (Framingham recalibrated)",
x = "Age Exceeded",y = "Density")+theme_classic()
gathresh=ggarrange(p,p2,p3,nrow = 3)
gathresh
df_expanded <- data.frame(
id = integer(),
start = numeric(),
stop = numeric(),
event = integer(),
score1 = integer(),
score2 = integer(),
score3 = integer()
)
library(data.table)
# Convert df to data.table
# Convert df to data.table
setDT(df)
expand_data <- function(id, cad_status, censor_age, score1_age, score2_age,score3_age,enroll) {
ages <- sort(c(enroll, score1_age, score2_age,score3_age, censor_age))
result <- list()
for(j in 1:(length(ages) - 1)) {
start_age <- ages[j]
stop_age <- ages[j+1]
if(start_age == stop_age) next # skip if they are the same
s1 <- ifelse(start_age >= score1_age, 1, 0)
s2 <- ifelse(start_age >= score2_age, 1, 0)
s3 <- ifelse(start_age >= score3_age, 1, 0)
event_at_stop <- ifelse(stop_age == censor_age && cad_status == 2, 1, 0)
result[[length(result) + 1]] <- list(id = id, start = start_age, stop = stop_age, event = event_at_stop, score1 = s1, score2 = s2, score3=s3,enroll=enroll)
}
return(result)
}
list_dt <- lapply(1:nrow(df), function(i) {
row <- df[i,]
expand_data(row$id, row$Cad_0_Any, row$Cad_0_censor_age, row$thirty, row$ms,row$ten,row$enroll)
})
df_expanded <- rbindlist(unlist(list_dt, recursive = FALSE))
## left censor for calculation
df_expanded=df_expanded[df_expanded$start>=df_expanded$enroll,]
head(df_expanded)
test=readRDS("~/multistate2/output/test.rds")
pce.reverse.tenyear=readRDS("~/multistate2/output/pce.reverse.tenyear.rds")
ascvd.30.year.rc=readRDS("~/multistate2/output/ascvd.30year.rcnew.rds")
states=readRDS("~/multistate2/output/state_occupancy_risk.rds")
# Fit functions for score1 and score2
fit_function_score1 <- function(data) coxph(Surv(start, stop, event) ~ score1, data = data)
fit_function_score2 <- function(data) coxph(Surv(start, stop, event) ~ score2, data)
#[data$stop<=(data$start+30),])
fit_function_score3 <- function(data) coxph(Surv(start, stop, event) ~ score3, data = data)
df=test
df$Cad_0_censor_age=round(df$Cad_0_censor_age,0)
df$Cad_0_Any=ifelse(df$Cad_0_Any==2,1,0)
bad_indices=which(df$Cad_0_censor_age>=80&df$Cad_0_Any==1)
expanded_df <- data.frame()
score1_list=states
names(score1_list)=df$identifier
score2=ascvd.30.year.rc
rownames(score2)=df$identifier
score3=pce.reverse.tenyear
rownames(score3)=df$identifier
# Removing the bad IDs from score1_list
score1_list <- score1_list[-bad_indices]
# Removing the bad IDs from score2 dataframe
score2 <- score2[-bad_indices, ]
# Removing the bad IDs from score2 dataframe
score3 <- score3[-bad_indices, ]
df=df[-which(df$Cad_0_censor_age>=80&df$Cad_0_Any==1),]
dim(df)
all.equal(as.numeric(names(score1_list)),as.numeric(df$identifier))
all.equal(as.numeric(rownames(score2)),as.numeric(df$identifier))
all.equal(as.numeric(rownames(score3)),as.numeric(df$identifier))
# Initialize a list to store the results
expanded_list <- vector("list", length = nrow(df))
for(i in 1:nrow(df)) {
#print(i)
id <- df$id[i]
max_age <- df$Cad_0_censor_age[i]
event <- df$Cad_0_Any[i]
enroll = df$phenos.enrollment[i]
# When max_age is less than 40 or length of score1_list[i] is 0
if (max_age < 40 || length(score1_list[[i]]) == 0) {
next  # Skip this iteration and proceed to the next
}
age_range <- 40:(40 + length(score1_list[[i]]) - 1)
score1_values <- score1_list[[i]]
score2_values <- score2[i, age_range - 39]
score3_values <- score3[i, age_range - 39]
# If there's an event and score1 is shorter than expected
if (event == 1 && max(age_range) < max_age) {
extended_age_range <- (max(age_range) + 1):max_age
score1_last_value <- rep(tail(score1_list[[i]], 1), times = length(extended_age_range))
score1_values <- c(score1_list[[i]], score1_last_value)
score2_last_value <- score2[i,(extended_age_range-39)]
score2_values <- c(score2_values, score2_last_value)
score3_last_value <- score3[i,(extended_age_range-39)]
score3_values <- c(score3_values, score3_last_value)
age_range <- c(age_range, extended_age_range)
}
# Store the resulting dataframe as a list element
expanded_list[[i]] <- data.frame(id = id,
age = age_range,
score1 = score1_values,
score2 = score2_values,
score3 = score3_values,
enroll=enroll,
event = ifelse(age_range == max_age, event, 0))
}
expanded_df <- do.call(rbind, expanded_list)
expanded_df$score1=expanded_df$score1*100
expanded_df$start <- expanded_df$age
expanded_df$stop <- expanded_df$age + 1
head(expanded_df)
library(flashier)
library(Matrix)
df.phecode.wide=readRDS("~/Library/CloudStorage/Dropbox-Personal/phecode//df.phecode.wide.rds")
dfw=df.phecode.wide[,-c(1:5)]
dfw[!is.na(dfw)]=1
dfw[is.na(dfw)]=0
X=as.matrix(dfw)
X=X[,which(colSums(X)>0)]
X=X[which(rowSums(X)>0),]
X=Matrix(X,sparse = T)
f2=flashier::flash(data = X,ebnm_fn = c(ebnm_point_exponential,ebnm_point_exponential),var_type = 2,greedy_Kmax = 20,nullcheck = F)
head(sort(f2$F_pm[,2],decreasing = T),n=20)
head(sort(f2$F_pm[,1],decreasing = T),n=20)
head(sort(f2$F_pm[,3],decreasing = T),n=20)
head(sort(f2$F_pm[,4],decreasing = T),n=20)
fit=readRDS(paste0(filepath,"fit_default_all.rds"))
filepath="~/Library/CloudStorage/Dropbox-Personal/pheno_dir/"
## with no positivity constraint
fit=readRDS(paste0(filepath,"fit_default_all.rds"))
head(sort(fit$F_pm[,2],decreasing = T,n=20))
tail(sort(fit$F_pm[,2],decreasing = T,n=20))
head(sort(fit$F_pm[,3],decreasing = T,n=20))
tail(sort(fit$F_pm[,3],decreasing = T,n=20))
dfw[is.na(dfw)]=0
X=as.matrix(dfw)
X=X[,which(colSums(X)>0)]
dim(X)
X=Matrix(X,sparse = T)
remotes::install_github("willwerscheid/flashier", ref = "allow_zero_rows")
library(flashier)
f2=flashier::flash(data = X,ebnm_fn = c(ebnm_point_normal,ebnm_point_exponential),var_type = 2,greedy_Kmax = 20,nullcheck = F,backfit = T)
detach("package:flashier", unload = TRUE)
remotes::install_github("willwerscheid/flashier", ref = "allow_zero_rows")
f2=flashier::flash(data = X,ebnm_fn = c(ebnm_point_normal,ebnm_point_exponential),var_type = 2,greedy_Kmax = 20,nullcheck = F,backfit = T)
remotes::install_github("willwerscheid/flashier", ref = "allow_zero_rows")
remotes::install_github("willwerscheid/flashier", ref = "allow_zero_rows",force = T)
library(flashier)
f2=flashier::flash(data = X,ebnm_fn = c(ebnm_point_normal,ebnm_point_exponential),var_type = 2,greedy_Kmax = 20,nullcheck = F,backfit = T)
