prcmat[z, 3] = pr.curve(scores.class0 = fg, scores.class1 = bg)$auc.integral
print(paste0("Completedforage", age))
}
sqrt(var(roc(d$outcome ~ d$cad.prs)))
aucmat = matrix(NA, nrow = length(enrollments), ncol = 4)
prcmat = matrix(NA, nrow = length(enrollments), ncol = 3)
semat = matrix(NA, nrow = length(enrollments), ncol = 4)
ages = 40:80
enrollments = c(41:70)
## return a matrix of coefficients over all ages for a given state to state transition
b=coefplotsmooth2(ages = ages,start = "Health",stop = "Cad",modelfit = modelfit,window_width = 20,span = 0.75,degree = 2)
ggplotly(b$plot)
coefs=b$custom_smooth
for (z in 1:length(enrollments)) {
age = enrollments[z]
start = age
stop = 80
df_frame = test
atrisk = df_frame[age < Cad_0_censor_age &
age < Ht_0_censor_age &
age < HyperLip_0_censor_age &
age < Dm_0_censor_age & smoke == 0 ,]
df_updated = data.frame(atrisk)
ar = data.frame(
"intercept" = 1,
"cad.prs" = atrisk$cad.prs,
"sex" = atrisk$f.31.0.0,
"smoke" = atrisk$smoke,
"antihtn_now" = ifelse(atrisk$antihtn == 1 &
atrisk$htn_age < age, 1, 0)
)
dat = data.frame(
"id" = atrisk$identifier,
"sex" = as.factor(atrisk$sex),
"age" = rep(age, nrow(atrisk)),
sbp = atrisk$sbp,
"treat" = ifelse(atrisk$antihtn == 1 &
atrisk$htn_age < age, 1, 0),
"smoking" = atrisk$smoke,
"diabetes" = ifelse(atrisk$Dm_0_Any == 2 &
atrisk$Dm_0_censor_age < age, 1, 0),
"totalchol" = atrisk$choladj,
"hdl" = atrisk$hdladj,
"Race" = atrisk$Race,
"statnow" = ifelse(atrisk$statin == 1 & atrisk$statin_age < age, 1, 0)
)
mso=compute_prediction_product_matrix(
coefmat = coefs,
atrisk = ar,
agepredinterval = c(start:stop)
)
df_updated$ms = mso$PredictedIntervalrisk
df_updated$frs.30y=fun.frs_30y(dat,id = "id",sex = "sex",age = "age",sbp ="sbp",treat = "treat",smoking = "smoking",diabetes = "diabetes",totalchol = "totalchol",hdl = "hdl")$frs_orig
### return matrix of smoothed coefficeints
#library(purrr)
rm(atrisk)
#require(pROC)
df_updated$outcome = ifelse(df_updated$Cad_0_Any == 2 &
df_updated$Cad_0_censor_age < stop,
1,
0)
#d = df_updated[round(phenos.enrollment, 0) == age, ]
d=df_updated
#d=d[!is.na(d$ascvd_10y_accaha),]
aucmat[z, 1] = roc(d$outcome ~ d$ms)$auc
semat[z,1]=sqrt(var(roc(d$outcome ~ d$ms)))
aucmat[z, 2] = roc(d$outcome ~ d$frs.30y)$auc
semat[z, 2] = sqrt(var(roc(d$outcome ~ d$frs.30y)))
aucmat[z, 4] = roc(d$outcome ~ d$cad.prs)$auc
semat[z, 4] = sqrt(var(roc(d$outcome ~ d$cad.prs)))
h = d$frs.30y/100 + d$ms
aucmat[z, 3] = roc(d$outcome ~ h)$auc
semat[z, 3] = sqrt(var(roc(d$outcome ~ d$h)))
require(PRROC)
fg <- d$ms[d$outcome == 1]
bg <- d$ms[d$outcome == 0]
prcmat[z, 1] = pr.curve(scores.class0 = fg, scores.class1 = bg)$auc.integral
#semat[i,1]=roc(d$outcome~d$ms)$se
#require(PRROC)
fg <- na.omit(d$frs.30y[d$outcome == 1])
bg <- na.omit(d$frs.30y[d$outcome == 0])
prcmat[z, 2] = pr.curve(scores.class0 = fg, scores.class1 = bg)$auc.integral
fg <- na.omit(d$cad.prs[d$outcome == 1])
bg <- na.omit(d$cad.prs[d$outcome == 0])
prcmat[z, 3] = pr.curve(scores.class0 = fg, scores.class1 = bg)$auc.integral
print(paste0("Completedforage", age))
}
set.seed(456)
enrollments = c(41:70)
aucmat = matrix(NA, nrow = length(enrollments), ncol = 4)
prcmat = matrix(NA, nrow = length(enrollments), ncol = 3)
semat = matrix(NA, nrow = length(enrollments), ncol = 4)
ages = 40:80
enrollments = c(41:70)
## return a matrix of coefficients over all ages for a given state to state transition
b=coefplotsmooth2(ages = ages,start = "Health",stop = "Cad",modelfit = modelfit,window_width = 20,span = 0.75,degree = 2)
ggplotly(b$plot)
coefs=b$custom_smooth
for (z in 1:length(enrollments)) {
age = enrollments[z]
start = age
stop = 80
df_frame = test
atrisk = df_frame[age < Cad_0_censor_age &
age < Ht_0_censor_age &
age < HyperLip_0_censor_age &
age < Dm_0_censor_age & smoke == 0 ,]
df_updated = data.frame(atrisk)
ar = data.frame(
"intercept" = 1,
"cad.prs" = atrisk$cad.prs,
"sex" = atrisk$f.31.0.0,
"smoke" = atrisk$smoke,
"antihtn_now" = ifelse(atrisk$antihtn == 1 &
atrisk$htn_age < age, 1, 0)
)
dat = data.frame(
"id" = atrisk$identifier,
"sex" = as.factor(atrisk$sex),
"age" = rep(age, nrow(atrisk)),
sbp = atrisk$sbp,
"treat" = ifelse(atrisk$antihtn == 1 &
atrisk$htn_age < age, 1, 0),
"smoking" = atrisk$smoke,
"diabetes" = ifelse(atrisk$Dm_0_Any == 2 &
atrisk$Dm_0_censor_age < age, 1, 0),
"totalchol" = atrisk$choladj,
"hdl" = atrisk$hdladj,
"Race" = atrisk$Race,
"statnow" = ifelse(atrisk$statin == 1 & atrisk$statin_age < age, 1, 0)
)
mso=compute_prediction_product_matrix(
coefmat = coefs,
atrisk = ar,
agepredinterval = c(start:stop)
)
df_updated$ms = mso$PredictedIntervalrisk
df_updated$frs.30y=fun.frs_30y(dat,id = "id",sex = "sex",age = "age",sbp ="sbp",treat = "treat",smoking = "smoking",diabetes = "diabetes",totalchol = "totalchol",hdl = "hdl")$frs_orig
### return matrix of smoothed coefficeints
#library(purrr)
rm(atrisk)
#require(pROC)
df_updated$outcome = ifelse(df_updated$Cad_0_Any == 2 &
df_updated$Cad_0_censor_age < stop,
1,
0)
#d = df_updated[round(phenos.enrollment, 0) == age, ]
d=df_updated
#d=d[!is.na(d$ascvd_10y_accaha),]
aucmat[z, 1] = roc(d$outcome ~ d$ms)$auc
semat[z,1]=sqrt(var(roc(d$outcome ~ d$ms)))
aucmat[z, 2] = roc(d$outcome ~ d$frs.30y)$auc
semat[z, 2] = sqrt(var(roc(d$outcome ~ d$frs.30y)))
aucmat[z, 4] = roc(d$outcome ~ d$cad.prs)$auc
semat[z, 4] = sqrt(var(roc(d$outcome ~ d$cad.prs)))
h = d$frs.30y/100 + d$ms
aucmat[z, 3] = roc(d$outcome ~ h)$auc
semat[z, 3] = sqrt(var(roc(d$outcome ~ h)))
require(PRROC)
fg <- d$ms[d$outcome == 1]
bg <- d$ms[d$outcome == 0]
prcmat[z, 1] = pr.curve(scores.class0 = fg, scores.class1 = bg)$auc.integral
#semat[i,1]=roc(d$outcome~d$ms)$se
#require(PRROC)
fg <- na.omit(d$frs.30y[d$outcome == 1])
bg <- na.omit(d$frs.30y[d$outcome == 0])
prcmat[z, 2] = pr.curve(scores.class0 = fg, scores.class1 = bg)$auc.integral
fg <- na.omit(d$cad.prs[d$outcome == 1])
bg <- na.omit(d$cad.prs[d$outcome == 0])
prcmat[z, 3] = pr.curve(scores.class0 = fg, scores.class1 = bg)$auc.integral
print(paste0("Completedforage", age))
}
head(semat)
m = melt(aucmat, id.vars = "Age")
names(m) = c("Age", "Model", "AUC")
m$Model = as.factor(m$Model)
m$se=0.009
levels(m$Model)[1] = "MSGene"
levels(m$Model)[2] = "FRS30y"
levels(m$Model)[3] = "Combined"
levels(m$Model)[4] = "PRS only"
m$se=as.vector(semat)
m = m[m$Model %in% c("MSGene", "FRS30y", "PRS only"), ]
aucplot <-
ggplot(m[m$Age<55,],
aes(x = Age, y = AUC, color = Model, ymin = AUC + se, ymax = AUC - se))+ geom_point() +
geom_line(aes(group = Model, color = Model), linewidth = 3) +
geom_pointrange() +
ylim(0.5, 0.8) +
theme_classic() + ggtitle(paste0("30-year risk prediction"))
aucplot
rownames(aucmat) = enrollments
m = melt(aucmat, id.vars = "Age")
names(m) = c("Age", "Model", "AUC")
m$Model = as.factor(m$Model)
levels(m$Model)[1] = "MSGene"
levels(m$Model)[2] = "FRS30y"
levels(m$Model)[3] = "Combined"
levels(m$Model)[4] = "PRS only"
m$se=as.vector(semat)
m = m[m$Model %in% c("MSGene", "FRS30y", "PRS only"), ]
aucplot <-
ggplot(m[m$Age<55,],
aes(x = Age, y = AUC, color = Model, ymin = AUC + se, ymax = AUC - se))+ geom_point() +
geom_line(aes(group = Model, color = Model), linewidth = 3) +
geom_pointrange() +
ylim(0.5, 0.8) +
theme_classic() + ggtitle(paste0("30-year risk prediction"))
aucmat
aucplot
rownames(prcmat) = enrollments
m = melt(prcmat, id.vars = "Age")
names(m) = c("Age", "Model", "AUC")
m$Model = as.factor(m$Model)
levels(m$Model)[1] = "MSGene"
levels(m$Model)[2] = "FRS30y"
levels(m$Model)[4] = "PRS only"
m$se=as.vector(semat[,c(1,2,4)])
m = m[m$Model %in% c("MSGene", "FRS30y", "PRS only"), ]
prplot <-
ggplot(m[m$Age<55,],
aes(x = Age, y = AUC, color = Model, ymin = AUC + se, ymax = AUC - se))+ geom_point() +
geom_line(aes(group = Model, color = Model), linewidth = 3) +
geom_pointrange() +
ylim(0.5, 0.8) +
theme_classic() + ggtitle(paste0("30-year risk prediction"))
prplot
rownames(prcmat) = enrollments
m = melt(prcmat, id.vars = "Age")
names(m) = c("Age", "Model", "AUC")
m$Model = as.factor(m$Model)
levels(m$Model)[1] = "MSGene"
levels(m$Model)[2] = "FRS30y"
levels(m$Model)[4] = "PRS only"
m$se=as.vector(semat[,c(1,2,4)])
m = m[m$Model %in% c("MSGene", "FRS30y", "PRS only"), ]
prplot <-
ggplot(m[m$Age<55,],
aes(x = Age, y = AUC, color = Model, ymin = AUC + se, ymax = AUC - se))+ geom_point() +
geom_line(aes(group = Model, color = Model), linewidth = 3) +
geom_pointrange() +
theme_classic() + ggtitle(paste0("30-year risk prediction"))
prplot
levels(m$Model)[1] = "MSGene"
levels(m$Model)[2] = "FRS30y"
levels(m$Model)[3] = "Combined"
levels(m$Model)[4] = "PRS only"
m$se=as.vector(semat)
improv = mean(aucmat[, 1] - aucmat[, 2]) * 100
rownames(aucmat) = enrollments
m = melt(aucmat, id.vars = "Age")
names(m) = c("Age", "Model", "AUC")
m$Model = as.factor(m$Model)
levels(m$Model)[1] = "MSGene"
levels(m$Model)[2] = "FRS30y"
levels(m$Model)[3] = "Combined"
levels(m$Model)[4] = "PRS only"
m$se=as.vector(semat)
m = m[m$Model %in% c("MSGene", "FRS30y", "PRS only"), ]
aucplot <-
ggplot(m[m$Age<55,],
aes(x = Age, y = AUC, color = Model, ymin = AUC + se, ymax = AUC - se))+ geom_point() +
geom_line(aes(group = Model, color = Model), linewidth = 3) +
geom_pointrange() +
ylim(0.5, 0.8) +
theme_classic() + ggtitle(paste0("30-year risk predictionk, ROC AUC"))
rownames(prcmat) = enrollments
m = melt(prcmat, id.vars = "Age")
names(m) = c("Age", "Model", "AUC")
m$Model = as.factor(m$Model)
levels(m$Model)[1] = "MSGene"
levels(m$Model)[2] = "FRS30y"
levels(m$Model)[4] = "PRS only"
m$se=as.vector(semat[,c(1,2,4)])
m = m[m$Model %in% c("MSGene", "FRS30y", "PRS only"), ]
prplot <-
ggplot(m[m$Age<55,],
aes(x = Age, y = AUC, color = Model, ymin = AUC + se, ymax = AUC - se))+ geom_point() +
geom_line(aes(group = Model, color = Model), linewidth = 3) +
geom_pointrange() +
theme_classic() + ggtitle(paste0("30-year risk prediction, Precision Recall"))
ggarrange(aucplot,prplot,common.legend = T)
head(m)
prcmat
head(prcmar)
rownames(prcmat) = enrollments
m = melt(prcmat, id.vars = "Age")
names(m) = c("Age", "Model", "AUC")
m$Model = as.factor(m$Model)
levels(m$Model)[1] = "MSGene"
levels(m$Model)[2] = "FRS30y"
levels(m$Model)[3] = "PRS only"
m$se=as.vector(semat[,c(1,2,4)])
prplot <-
ggplot(m[m$Age<55,],
aes(x = Age, y = AUC, color = Model, ymin = AUC + se, ymax = AUC - se))+ geom_point() +
geom_line(aes(group = Model, color = Model), linewidth = 3) +
geom_pointrange() +
theme_classic() + ggtitle(paste0("30-year risk prediction, Precision Recall"))
ggarrange(aucplot,prplot,common.legend = T)
rownames(prcmat) = enrollments
m = melt(prcmat, id.vars = "Age")
names(m) = c("Age", "Model", "AUC")
m$Model = as.factor(m$Model)
levels(m$Model)[1] = "MSGene"
levels(m$Model)[2] = "FRS30y"
levels(m$Model)[3] = "PRS only"
m$se=as.vector(semat[,c(1,2,4)])/2
#m = m[m$Model %in% c("MSGene", "FRS30y", "PRS only"), ]
prplot <-
ggplot(m[m$Age<55,],
aes(x = Age, y = AUC, color = Model, ymin = AUC + se, ymax = AUC - se))+ geom_point() +
geom_line(aes(group = Model, color = Model), linewidth = 3) +
geom_pointrange() +
theme_classic() + ggtitle(paste0("30-year risk prediction, Precision Recall"))
ggarrange(aucplot,prplot,common.legend = T)
merged_data <- data.table(patient_id = character(0))
for (file_path in file_paths) {
file_name <- gsub(".tab.tsv.gz$", "", basename(file_path))
file_data <- fread(file_path, select = c("patient_id", "has_disease", "censor_age"))
# Concatenate has_disease and censor_age with disease name
combined_col <- paste(file_name, c("has_disease", "censor_age"), sep = ".")
file_data[, (combined_col) := paste(has_disease, censor_age, sep = "_")]
# Keep only the combined column and patient_id
file_data <- file_data[, c("patient_id", combined_col), with = FALSE]
# Merge data based on patient_id
if (ncol(merged_data) == 1) {
merged_data <- file_data
} else {
merged_data <- merge(merged_data, file_data, by = "patient_id", all = TRUE)
}
}
file_paths <- list.files(path = "~/Desktop/output_gp/", pattern = "\\.tab\\.tsv\\.gz$", full.names = TRUE)
for (file_path in file_paths) {
file_name <- gsub(".tab.tsv.gz$", "", basename(file_path))
file_data <-
fread(file_path,
select = c(“sample_id”, "has_disease", "censor_age"))
for (file_path in file_paths) {
file_name <- gsub(".tab.tsv.gz$", "", basename(file_path))
file_data <-fread(file_path,select = c(“sample_id”, "has_disease", "censor_age"))
file_paths <- list.files(path = "~/Desktop/output_gp/", pattern = "\\.tab\\.tsv\\.gz$", full.names = TRUE)
for (file_path in file_paths) {
file_name <- gsub(".tab.tsv.gz$", "", basename(file_path))
file_data <-fread(file_path,select = c("sample_id", "has_disease", "censor_age"))
fd = file_data[, c("sample_id", "has_disease", "censor_age")]
names(fd)[2] = paste0(file_name, "has_disease")
names(fd)[3] = paste0(file_name, "censor_age")
# Merge data based on patient_id
if (ncol(merged_data) == 1) {
merged_data <- file_data
} else {
merged_data <-
merge(merged_data,
file_data,
by =  “sample_id”,
file_paths <- list.files(path = "~/Desktop/output_gp/", pattern = "\\.tab\\.tsv\\.gz$", full.names = TRUE)
for (file_path in file_paths) {
file_name <- gsub(".tab.tsv.gz$", "", basename(file_path))
file_data <-fread(file_path,select = c("sample_id", "has_disease", "censor_age"))
fd = file_data[, c("sample_id", "has_disease", "censor_age")]
names(fd)[2] = paste0(file_name, "has_disease")
names(fd)[3] = paste0(file_name, "censor_age")
# Merge data based on patient_id
if (ncol(merged_data) == 1) {
merged_data <- file_data
} else {
merged_data <-
merge(merged_data,
file_data,
by =  "sample_id",
all = TRUE)
}
}
head(merged_data)
file_paths <- list.files(path = "~/Desktop/output_gp/", pattern = "\\.tab\\.tsv\\.gz$", full.names = TRUE)
for (file_path in file_paths) {
file_name <- gsub(".tab.tsv.gz$", "", basename(file_path))
file_data <-fread(file_path,select = c("sample_id", "has_disease", "censor_age"))
fd = file_data[, c("sample_id", "has_disease", "censor_age")]
names(fd)[2] = paste0(file_name, "has_disease")
names(fd)[3] = paste0(file_name, "censor_age")
# Merge data based on patient_id
if (ncol(merged_data) == 1) {
merged_data <- fd
} else {
merged_data <-
merge(merged_data,
fd,
by =  "sample_id",
all = TRUE)
}
}
file_name
file_name <- gsub(".tab.tsv.gz$", "", basename(file_path))
file_data <-fread(file_path,select = c("sample_id", "has_disease", "censor_age"))
fd = file_data[, c("sample_id", "has_disease", "censor_age")]
head(fd)
names(fd)[2] = paste0(file_name, "has_disease")
names(fd)[3] = paste0(file_name, "censor_age")
head(fd)
names(fd)[2] = paste0(file_name, ":has_disease")
names(fd)[3] = paste0(file_name, ":censor_age")
head(fd)
merged_data <- data.table(sample_id = character(0))
for (file_path in file_paths) {
file_name <- gsub(".tab.tsv.gz$", "", basename(file_path))
file_data <-fread(file_path,select = c("sample_id", "has_disease", "censor_age"))
fd = file_data[, c("sample_id", "has_disease", "censor_age")]
names(fd)[2] = paste0(file_name, ":has_disease")
names(fd)[3] = paste0(file_name, ":censor_age")
# Merge data based on patient_id
if (ncol(merged_data) == 1) {
merged_data <- fd
} else {
merged_data <-
merge(merged_data,
fd,
by =  "sample_id",
all = TRUE)
}
}
head(merged_data)
merged_has <- data.table(sample_id = character(0))
for (file_path in file_paths) {
file_name <- gsub(".tab.tsv.gz$", "", basename(file_path))
file_data <-fread(file_path,select = c("sample_id", "has_disease"))
fd = file_data[, c("sample_id", "has_disease")]
names(fd)[2] = paste0(file_name, ":has_disease")
# Merge data based on patient_id
if (ncol(merged_data) == 1) {
merged_has <- fd
} else {
merged_has <-
merge(merged_has,
fd
by =  "sample_id",
for (file_path in file_paths) {
file_name <- gsub(".tab.tsv.gz$", "", basename(file_path))
file_data <-fread(file_path,select = c("sample_id", "has_disease"))
fd = file_data[, c("sample_id", "has_disease")]
names(fd)[2] = paste0(file_name, ":has_disease")
# Merge data based on patient_id
if (ncol(merged_data) == 1) {
merged_has <- fd
} else {
merged_has <-
merge(merged_has,
fd
by =  "sample_id",
for (file_path in file_paths) {
file_name <- gsub(".tab.tsv.gz$", "", basename(file_path))
file_data <-fread(file_path,select = c("sample_id", "has_disease"))
fd = file_data[, c("sample_id", "has_disease")]
names(fd)[2] = paste0(file_name, ":has_disease")
# Merge data based on patient_id
if (ncol(merged_data) == 1) {
merged_has <- fd
} else {
merged_has <-
merge(merged_has,
fd,
by =  "sample_id",
all = TRUE)
}
}
file_name <- gsub(".tab.tsv.gz$", "", basename(file_path))
file_data <-fread(file_path,select = c("sample_id", "has_disease"))
head(file_data)
file_name
fd = file_data[, c("sample_id", "has_disease")]
names(fd)[2] = paste0(file_name, ":has_disease")
head(fd)
merged_has <-
merge(merged_has,
fd,
by =  "sample_id",
all = TRUE)
str(fd)
merged_has <- data.table(sample_id = integer(0))
for (file_path in file_paths) {
file_name <- gsub(".tab.tsv.gz$", "", basename(file_path))
file_data <-fread(file_path,select = c("sample_id", "has_disease"))
fd = file_data[, c("sample_id", "has_disease")]
names(fd)[2] = paste0(file_name, ":has_disease")
# Merge data based on patient_id
if (ncol(merged_data) == 1) {
merged_has <- fd
} else {
merged_has <-
merge(merged_has,
fd,
by =  "sample_id",
all = TRUE)
}
}
head(merged_has)
fr=readRDS("~/Dropbox/for_rohan.rds")
fr=readRDS("~/Dropbox/mash_materials/for_rohan.rds")
fr=readRDS("~/Dropbox/mash_materials/for_rohan_z.rds")
fr=readRDS("~/Dropbox/mash_materials/for_rohan_z.rds")
fr=readRDS("~/Dropbox/mash_materials/for_rohan_z.rds")
fr=readRDS("~/Dropbox/mash_materials/for_rohan_z.rds")
fr=readRDS("~/Dropbox/mash_materials/for_rohan_z.rds")
fr=readRDS("~/Dropbox/mash_materials/for_rohan_z.rds")
fr=readRDS("~/Dropbox/mash_materials/for_rohan_z.rds")
fr=readRDS("~/Dropbox/mash_materials/for_rohan_z.rds")
fr=readRDS("~/Dropbox/mash_materials/for_rohan_z.rds")
fr=readRDS("~/Dropbox/mash_materials/for_rohan_z.rds")
fr=readRDS("~/Dropbox/mash_materials/for_rohan_z.rds")
fr=readRDS("/Users/sarahurbut/Dropbox/mash_materials/for_rohan_z.rds")
source("~/multistate2/code/fitarray.R")
