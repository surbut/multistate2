pcten
pcten=gofRMSE(Obs = as.vector(emp.ten.year*100),Prd = as.vector(ascvd.ten.year))
msten=gofRMSE(Obs = as.vector(emp.ten.year*100),Prd = as.vector(ten.year.new*100))
msten.three=gofRMSE(Obs = as.vector(emp.ten.year*100),Prd = as.vector(ten.year.two*100))
print((data.frame("RMSE"=c(pcten,msten,msten.two),"Method"=c("PCE","MSNEW","MSOLD"))))
pcten=gofRMSE(Obs = as.vector(emp.ten.year*100),Prd = as.vector(ascvd.ten.year))
msten=gofRMSE(Obs = as.vector(emp.ten.year*100),Prd = as.vector(ten.year.new*100))
msten.three=gofRMSE(Obs = as.vector(emp.ten.year*100),Prd = as.vector(ten.year.two*100))
print((data.frame("RMSE"=c(pcten,msten,msten.three),"Method"=c("PCE","MSNEW","MSOLD"))))
head(mat)
compute_prediction_product_matrix
atrisk = test[age < Cad_0_censor_age &
age < Ht_0_censor_age &
age < HyperLip_0_censor_age &
age < Dm_0_censor_age & smoke==0 &int==cat, ]
ar=data.frame("intercept"=1,atrisk$cad.prs,atrisk$f.31.0.0,atrisk$smoke)
head(ar)
####
ten.year.new=matrix(NA,nrow = length(agesint),ncol=length(prs_quants)*2)
lifetime.new=matrix(NA,nrow = length(agesint),ncol=length(prs_quants)*2)
b=coefplotsmooth2(ages = ages,start = "Health",stop = "Cad",modelfit = modelfit,window_width = 20,span = 0.75,degree = 2)
ggplotly(b$plot)
coefs=b$custom_smooth
for(i in 1:length(agesint)){
age=agesint[i]
atrisk = test[age < Cad_0_censor_age &
age < Ht_0_censor_age &
age < HyperLip_0_censor_age &
age < Dm_0_censor_age & smoke==0 &int==cat, ]
ar=data.frame("intercept"=1,atrisk$cad.prs,atrisk$f.31.0.0,atrisk$smoke)
ten.year.new[i,]=compute_prediction_product_matrix(atrisk = ar,agepredinterval = c(age:(age+10)),coefmat = coefs)$PredictedIntervalrisk
lifetime.new[i,]=compute_prediction_product_matrix(atrisk = ar,agepredinterval = c(age:(80)),coefmat = coefs)$PredictedIntervalrisk
}
ten.year.new=matrix(NA,nrow = length(agesint),ncol=length(prs_quants)*2)
lifetime.new=matrix(NA,nrow = length(agesint),ncol=length(prs_quants)*2)
b=coefplotsmooth2(ages = ages,start = "Health",stop = "Cad",modelfit = modelfit,window_width = 20,span = 0.75,degree = 2)
ggplotly(b$plot)
coefs=b$custom_smooth
for(i in 1:length(agesint)){
age=agesint[i]
atrisk = test[age < Cad_0_censor_age &
age < Ht_0_censor_age &
age < HyperLip_0_censor_age &
age < Dm_0_censor_age & smoke==0 &int==cat, ]
ar=data.frame("intercept"=1,atrisk$cad.prs,atrisk$f.31.0.0,atrisk$smoke)
ten.year.new[i,]=compute_prediction_product_matrix(atrisk = ar,agepredinterval = c(age:(age+10)),coefmat = coefs)$PredictedIntervalrisk
lifetime.new[i,]=compute_prediction_product_matrix(atrisk = ar,agepredinterval = c(age:(80)),coefmat = coefs)$PredictedIntervalrisk
}
for(i in 1:length(agesint)){
age=agesint[i]
atrisk = test[age < Cad_0_censor_age &
age < Ht_0_censor_age &
age < HyperLip_0_censor_age &
age < Dm_0_censor_age & smoke==0 &int==cat, ]
ar=data.frame("intercept"=1,atrisk$cad.prs,atrisk$f.31.0.0,atrisk$smoke)
ten.year.new[i,]=mean(compute_prediction_product_matrix(atrisk = ar,agepredinterval = c(age:(age+10)),coefmat = coefs)$PredictedIntervalrisk)
lifetime.new[i,]=mean(compute_prediction_product_matrix(atrisk = ar,agepredinterval = c(age:(80)),coefmat = coefs)$PredictedIntervalrisk)
}
head(ten.year.new)
head(lifetime.new)
## remember to reshuffle so the orders are the same
ten.year.new=ten.year.new[,c(1,4,2,5,3,6)]
lifetime.new=ten.year.new[,c(1,4,2,5,3,6)]
msten=gofRMSE(Obs = as.vector(emp.ten.year*100),Prd = as.vector(ten.year.new*100))
msten
ten.year.new
for(i in 1:length(agesint)){
age=agesint[i]
for(j in 1:length(levels(test$int))){
cat=levels(test$int)[j]
atrisk = test[age < Cad_0_censor_age &
age < Ht_0_censor_age &
age < HyperLip_0_censor_age &
age < Dm_0_censor_age & smoke==0 &int==cat, ]
ar=data.frame("intercept"=1,atrisk$cad.prs,atrisk$f.31.0.0,atrisk$smoke)
ten.year.new[i,j]=mean(compute_prediction_product_matrix(atrisk = ar,agepredinterval = c(age:(age+10)),coefmat = coefs)$PredictedIntervalrisk)
lifetime.new[i,j]=mean(compute_prediction_product_matrix(atrisk = ar,agepredinterval = c(age:(80)),coefmat = coefs)$PredictedIntervalrisk)
}}
## remember to reshuffle so the orders are the same
ten.year.new=ten.year.new[,c(1,4,2,5,3,6)]
lifetime.new=ten.year.new[,c(1,4,2,5,3,6)]
msten=gofRMSE(Obs = as.vector(emp.ten.year*100),Prd = as.vector(ten.year.new*100))
msten
ten.year.new
emp.ten.year
ten.year.two
ten.year.old
a=return_smoothedmatrix(start = start,stop = stop,ages = ages,modelfit = modelfit)$coefmat
rownames(a)=a[,1]
mat=a[,c(2:5)]
for(i in 1:length(agesint)){
age=agesint[i]
for(j in 1:length(levels(test$int))){
cat=levels(test$int)[j]
atrisk = test[age < Cad_0_censor_age &
age < Ht_0_censor_age &
age < HyperLip_0_censor_age &
age < Dm_0_censor_age & smoke==0 &int==cat, ]
ar=data.frame("intercept"=1,atrisk$cad.prs,atrisk$f.31.0.0,atrisk$smoke)
ten.year.new[i,j]=mean(compute_prediction_product_matrix(atrisk = ar,agepredinterval = c(age:(age+10)),coefmat = mat)$PredictedIntervalrisk)
lifetime.new[i,j]=mean(compute_prediction_product_matrix(atrisk = ar,agepredinterval = c(age:(80)),coefmat = mat)$PredictedIntervalrisk)
}}
## remember to reshuffle so the orders are the same
ten.year.new=ten.year.new[,c(1,4,2,5,3,6)]
lifetime.new=ten.year.new[,c(1,4,2,5,3,6)]
msten=gofRMSE(Obs = as.vector(emp.ten.year*100),Prd = as.vector(ten.year.new*100))
msten
emp.ten.year=matrix(NA,nrow = length(agesint),ncol=length(prs_quants)*2)
emp.lifetime=matrix(NA,nrow = length(agesint),ncol=length(prs_quants)*2)
test=data.table(test)
for(i in 1:length((agesint))){
age=agesint[i]
for(j in 1:length(levels(test$int))){
cat=levels(test$int)[j]
atrisk = test[age < Cad_0_censor_age &
age < Ht_0_censor_age &
age < HyperLip_0_censor_age &
age < Dm_0_censor_age & int==cat, ]
print(dim(atrisk))
emp.ten.year[i,j]=compute_empiricalrisk(age=age,age2 = age+10,atrisk = atrisk)
emp.lifetime[i,j]=compute_empiricalrisk(age=age,age2 = 100,atrisk  = atrisk)
}}
emp.ten.year=matrix(NA,nrow = length(agesint),ncol=length(prs_quants)*2)
emp.lifetime=matrix(NA,nrow = length(agesint),ncol=length(prs_quants)*2)
test=data.table(test)
for(i in 1:length((agesint))){
age=agesint[i]
for(j in 1:length(levels(test$int))){
cat=levels(test$int)[j]
atrisk = test[age < Cad_0_censor_age &
age < Ht_0_censor_age &
age < HyperLip_0_censor_age &
age < Dm_0_censor_age & smoke==0 &int==cat, ]
print(dim(atrisk))
emp.ten.year[i,j]=compute_empiricalrisk(age=age,age2 = age+10,atrisk = atrisk)
emp.lifetime[i,j]=compute_empiricalrisk(age=age,age2 = 100,atrisk  = atrisk)
}}
emp.ten.year=matrix(NA,nrow = length(agesint),ncol=length(prs_quants)*2)
emp.lifetime=matrix(NA,nrow = length(agesint),ncol=length(prs_quants)*2)
test=data.table(test)
for(i in 1:length((agesint))){
age=agesint[i]
for(j in 1:length(levels(test$int))){
cat=levels(test$int)[j]
atrisk = test[age < Cad_0_censor_age &
age < Ht_0_censor_age &
age < HyperLip_0_censor_age &
age < Dm_0_censor_age &int==cat, ]
print(dim(atrisk))
emp.ten.year[i,j]=compute_empiricalrisk(age=age,age2 = age+10,atrisk = atrisk)
emp.lifetime[i,j]=compute_empiricalrisk(age=age,age2 = 100,atrisk  = atrisk)
}}
for(i in 1:length(agesint)){
age=agesint[i]
for(j in 1:length(levels(test$int))){
cat=levels(test$int)[j]
atrisk = test[age < Cad_0_censor_age &
age < Ht_0_censor_age &
age < HyperLip_0_censor_age &
age < Dm_0_censor_age&int==cat, ]
ar=data.frame("intercept"=1,atrisk$cad.prs,atrisk$f.31.0.0,atrisk$smoke)
ten.year.new[i,j]=mean(compute_prediction_product_matrix(atrisk = ar,agepredinterval = c(age:(age+10)),coefmat = coefs)$PredictedIntervalrisk)
lifetime.new[i,j]=mean(compute_prediction_product_matrix(atrisk = ar,agepredinterval = c(age:(80)),coefmat = coefs)$PredictedIntervalrisk)
}}
## remember to reshuffle so the orders are the same
ten.year.new=ten.year.new[,c(1,4,2,5,3,6)]
lifetime.new=ten.year.new[,c(1,4,2,5,3,6)]
emp.ten.year
ascvd.ten.year=matrix(NA,nrow = length(agesint),ncol=length(prs_quants)*2)
test=merge(test,dfascvd[,c("sample_id","as2")],by.x="identifier",by.y="sample_id")
test$ascvd_10y_accaha=test$as2
test$phenos.enrollment=test$f.21003.0.0
test=data.table(test)
for(i in 1:length((agesint))){
age=agesint[i]
for(j in 1:length(levels(test$int))){
cat=levels(test$int)[j]
atrisk = test[age < Cad_0_censor_age &
age < Ht_0_censor_age &
age < HyperLip_0_censor_age &
age < Dm_0_censor_age &int==cat, ]
ascvd.ten.year[i,j]=compute_pce_predictedrisk(age=age,atrisk = atrisk)
#ascvdriskmat[i,2]=compute_empiricalrisk(age=40,df_frame = mpce,cat = cat)
}
}
head(test)
test=dfh[!(dfh$identifier%in%train$identifier),]
ascvd.ten.year=matrix(NA,nrow = length(agesint),ncol=length(prs_quants)*2)
test=merge(test,dfascvd[,c("sample_id","as2")],by.x="identifier",by.y="sample_id")
test$ascvd_10y_accaha=test$as2
test$phenos.enrollment=test$f.21003.0.0
test=data.table(test)
for(i in 1:length((agesint))){
age=agesint[i]
for(j in 1:length(levels(test$int))){
cat=levels(test$int)[j]
atrisk = test[age < Cad_0_censor_age &
age < Ht_0_censor_age &
age < HyperLip_0_censor_age &
age < Dm_0_censor_age &int==cat, ]
ascvd.ten.year[i,j]=compute_pce_predictedrisk(age=age,atrisk = atrisk)
#ascvdriskmat[i,2]=compute_empiricalrisk(age=40,df_frame = mpce,cat = cat)
}
}
library(ehaGoF)
pcten=gofRMSE(Obs = as.vector(emp.ten.year*100),Prd = as.vector(ascvd.ten.year))
msten=gofRMSE(Obs = as.vector(emp.ten.year*100),Prd = as.vector(ten.year.new*100))
pcten
msten
library(ehaGoF)
pcten=gofRMSE(Obs = as.vector(emp.ten.year*100),Prd = as.vector(ascvd.ten.year))
msten=gofRMSE(Obs = as.vector(emp.ten.year*100),Prd = as.vector(ten.year.new*100))
print((data.frame("RMSE"=c(pcten,msten,msten.three),"Method"=c("PCE","MSNEW","MSOLD"))))
coefplotsmooth2
plot_coef
coefficients=c2$OG
coefsmooth
coefplotsmooth
agenames=as.character(c(ages))
s=sapply(agenames,function(x){modelfit$model_list[[x]][[stop]][[start]][,"Estimate"]})
s=data.frame(s)
e=sapply(agenames,function(x){modelfit$model_list[[x]][[stop]][[start]][,"Std. Error"]})
colnames(s)=agenames
coefficients=s
standard_errors=e
smoothing_results <- apply_smoothing(coefficients, standard_errors)
smoothing_results <- apply_smoothing(ages = ages,coefficients = coefficients,standard_errors = standard_errors,window_width = 10,degree = 2,span = 0.75)
smoothing_results <- apply_smoothing(ages = ages,coefficients = coefficients[,2],standard_errors = standard_errors[,2],window_width = 10,degree = 2,span = 0.75)
head(coefficients)
smoothing_results <- apply_smoothing(ages = ages,coefficients = coefficients[2,],standard_errors = standard_errors[2,],window_width = 10,degree = 2,span = 0.75)
dim(standard_errors)
apply_smoothing
smoothing_results <- apply_smoothing(ages = ages,coefficients = t(coefficients),standard_errors = t(e),window_width = 10,degree = 2,span = 0.75)
data <- data.frame(
Age = rep(ages, 7),
Coefficient = as.vector(coefficients),
Standard_Error = as.vector(standard_errors),
Custom_LOESS = as.vector(smoothing_results$custom_loess),
Standard_LOESS_Weighted = as.vector(smoothing_results$standard_loess_weighted),
Standard_LOESS_Unweighted = as.vector(smoothing_results$standard_loess_unweighted),
Coefficient_Set = rep(1:7, each = length(ages))
)
head(smoothing_results)
data <- data.frame(
Age = rep(ages, 4),
Coefficient = as.vector(coefficients),
Standard_Error = as.vector(standard_errors),
Custom_LOESS = as.vector(smoothing_results$custom_loess),
Standard_LOESS_Weighted = as.vector(smoothing_results$standard_loess_weighted),
Standard_LOESS_Unweighted = as.vector(smoothing_results$standard_loess_unweighted),
Coefficient_Set = rep(1:4, each = length(ages))
)
# Convert to a long format for ggplot
data_long <- pivot_longer(data, c(Coefficient, Custom_LOESS, Standard_LOESS_Weighted, Standard_LOESS_Unweighted), names_to = "Method", values_to = "Value")
library(tidyr)
data <- data.frame(
Age = rep(ages, 4),
Coefficient = as.vector(coefficients),
Standard_Error = as.vector(standard_errors),
Custom_LOESS = as.vector(smoothing_results$custom_loess),
Standard_LOESS_Weighted = as.vector(smoothing_results$standard_loess_weighted),
Standard_LOESS_Unweighted = as.vector(smoothing_results$standard_loess_unweighted),
Coefficient_Set = rep(1:4, each = length(ages))
)
# Convert to a long format for ggplot
data_long <- pivot_longer(data, c(Coefficient, Custom_LOESS, Standard_LOESS_Weighted, Standard_LOESS_Unweighted), names_to = "Method", values_to = "Value")
data <- data.frame(
Age = rep(ages, 4),
Coefficient = as.vector(coefficients),
Standard_Error = as.vector(standard_errors),
Custom_LOESS = as.vector(smoothing_results$custom_loess),
Standard_LOESS_Weighted = as.vector(smoothing_results$standard_loess_weighted),
Standard_LOESS_Unweighted = as.vector(smoothing_results$standard_loess_unweighted),
Coefficient_Set = rep(1:4, each = length(ages))
)
head(data)
head(smoothing_results)
data <- data.frame(
Age = rep(ages, 4),
Coefficient = as.vector(coefficients),
Standard_Error = as.vector(standard_errors),
Custom_LOESS = as.vector(smoothing_results$custom_loess),
Standard_LOESS_Weighted = as.vector(smoothing_results$standard_loess_weighted),
Standard_LOESS_Unweighted = as.vector(smoothing_results$standard_loess_unweighted),
Coefficient_Set = rep(1:4, each = length(ages))
)
head(data)
plot_coef()
plot_coef
data <- data.frame(
Age = rep(ages, ncol(coefficients)),
Coefficient = as.vector(coefficients),
Custom_LOESS = as.vector(smoothing_results$custom_loess),
Standard_LOESS_Weighted = as.vector(smoothing_results$standard_loess_weighted),
Standard_LOESS_Unweighted = as.vector(smoothing_results$standard_loess_unweighted),
Coefficient_Set = rep(colnames(coefficients), each = length(ages))
)
data <- data.frame(
Age = rep(ages, ncol(coefficients)),
Coefficient = as.vector(coefficients),
Custom_LOESS = as.vector(smoothing_results$custom_loess),
Standard_LOESS_Weighted = as.vector(smoothing_results$standard_loess_weighted),
Standard_LOESS_Unweighted = as.vector(smoothing_results$standard_loess_unweighted),
Coefficient_Set = rep(colnames(coefficients), each = length(ages))
)
colnames(coefficients)
head(coefficients)
coefficients=t(coefficients)
standard_errors
standard_errors=t(standard_errors)
data <- data.frame(
Age = rep(ages, ncol(coefficients)),
Coefficient = as.vector(coefficients),
Custom_LOESS = as.vector(smoothing_results$custom_loess),
Standard_LOESS_Weighted = as.vector(smoothing_results$standard_loess_weighted),
Standard_LOESS_Unweighted = as.vector(smoothing_results$standard_loess_unweighted),
Coefficient_Set = rep(colnames(coefficients), each = length(ages))
)
head(data)
plot_coef
data_long <- pivot_longer(data, c(Coefficient, Custom_LOESS, Standard_LOESS_Weighted, Standard_LOESS_Unweighted), names_to = "Method", values_to = "Value")
# Create the ggplot
p <- ggplot(data_long, aes(x = Age, y = Value)) +
# Points for the original coefficients
geom_point(data = subset(data_long, Method == "Coefficient"), aes(color = Method)) +
# Error bars for the original coefficients
geom_errorbar(data = subset(data_long, Method == "Coefficient"), aes(ymin = Value - Standard_Error, ymax = Value + Standard_Error, color = Method), width = 0.3) +
# Lines for the smoothed fits
geom_line(aes(color = Method)) +
# Facets
facet_wrap(~Coefficient_Set, ncol = 1, scales = "free_y") +
# Titles and labels
labs(title = "Comparison of LOESS Fits for Different Coefficient Sets",
y = "Coefficients",
color = "Method") +
theme_minimal()
p
head(d)
head(data)
data$Standard_error=as.vector(standard_errors)
head(data)
data_long <- pivot_longer(data, c(Coefficient, Custom_LOESS, Standard_LOESS_Weighted, Standard_LOESS_Unweighted), names_to = "Method", values_to = "Value")
head(data_long)
# Create the ggplot
p <- ggplot(data_long, aes(x = Age, y = Value)) +
# Points for the original coefficients
geom_point(data = subset(data_long, Method == "Coefficient"), aes(color = Method)) +
# Error bars for the original coefficients
geom_errorbar(data = subset(data_long, Method == "Coefficient"), aes(ymin = Value - Standard_Error, ymax = Value + Standard_Error, color = Method), width = 0.3) +
# Lines for the smoothed fits
geom_line(aes(color = Method)) +
# Facets
facet_wrap(~Coefficient_Set, ncol = 1, scales = "free_y") +
# Titles and labels
labs(title = "Comparison of LOESS Fits for Different Coefficient Sets",
y = "Coefficients",
color = "Method") +
theme_minimal()
print(p)
# Create the ggplot
p <- ggplot(data_long, aes(x = Age, y = Value)) +
# Points for the original coefficients
geom_point(data = subset(data_long, Method == "Coefficient"), aes(color = Method)) +
# Error bars for the original coefficients
geom_errorbar(data = subset(data_long, Method == "Coefficient"), aes(ymin = Value - Standard_error, ymax = Value + Standard_error, color = Method), width = 0.3) +
# Lines for the smoothed fits
geom_line(aes(color = Method)) +
# Facets
facet_wrap(~Coefficient_Set, ncol = 1, scales = "free_y") +
# Titles and labels
labs(title = "Comparison of LOESS Fits for Different Coefficient Sets",
y = "Coefficients",
color = "Method") +
theme_minimal()
print(p)
p
data <- data.frame(
Age = rep(ages, ncol(coefficients)),
Coefficient = as.vector(coefficients),
Custom_LOESS = as.vector(smoothing_results$custom_loess),
Standard_LOESS_Weighted = as.vector(smoothing_results$standard_loess_weighted),
Standard_LOESS_Unweighted = as.vector(smoothing_results$standard_loess_unweighted),
Standard_error=as.vector(standard_errors),
Coefficient_Set = rep(colnames(coefficients), each = length(ages))
)
# Convert to a long format for ggplot
data_long <-
pivot_longer(
data,
c(
Coefficient,
Custom_LOESS,
Standard_LOESS_Weighted,
Standard_LOESS_Unweighted
),
names_to = "Method",
values_to = "Value"
)
p <- ggplot(data_long, aes(x = Age, y = Value)) +
geom_point(data = filter(data_long, Method == "Coefficient"), aes(color = Method)) +
geom_errorbar(data = subset(data_long, Method == "Coefficient"),
aes(ymin = Value - Standard_error, ymax = Value + Standard_error, color = Method), width = 0.3)+
geom_line(data = filter(data_long, Method != "Coefficient"), aes(color = Method)) +
#geom_smooth(data = filter(data_long, Method == "Coefficient"), aes(color = "red"))+
facet_wrap( ~ Coefficient_Set, nrow=2, scales = "free_y") +
labs(title = "Comparison of LOESS Fits for Different Coefficient Sets",
y = "Coefficients",
color = "Method") +
theme_minimal()
p
runApp('~/testapp')
library(ggplot2)
library(shiny)
source("smoothtest.R")
coefplotsmooth2(ages = ages,start = start,stop = stop,modelfit = f,window_width = 20,span = 0.3,degree = 2)
plot_coef = function(ages, coefficients, smoothing_results,standard_errors) {
# Create a data frame for ggplot
data <- data.frame(
Age = rep(ages, ncol(coefficients)),
Coefficient = as.vector(coefficients),
Custom_LOESS = as.vector(smoothing_results$custom_loess),
Standard_LOESS_Weighted = as.vector(smoothing_results$standard_loess_weighted),
Standard_LOESS_Unweighted = as.vector(smoothing_results$standard_loess_unweighted),
Standard_error=as.vector(standard_errors),
Coefficient_Set = rep(colnames(coefficients), each = length(ages))
)
# Convert to a long format for ggplot
data_long <-
pivot_longer(
data,
c(
Coefficient,
Custom_LOESS,
Standard_LOESS_Weighted,
Standard_LOESS_Unweighted
),
names_to = "Method",
values_to = "Value"
)
p <- ggplot(data_long, aes(x = Age, y = Value)) +
geom_point(data = filter(data_long, Method == "Coefficient"), aes(color = Method)) +
geom_errorbar(data = subset(data_long, Method == "Coefficient"),
aes(ymin = Value - Standard_error, ymax = Value + Standard_error, color = Method), width = 0.3)+
geom_line(data = filter(data_long, Method != "Coefficient"), aes(color = Method)) +
#geom_smooth(data = filter(data_long, Method == "Coefficient"), aes(color = "red"))+
facet_wrap( ~ Coefficient_Set, nrow=2, scales = "free_y") +
labs(title = "Comparison of LOESS Fits for Different Coefficient Sets",
y = "Coefficients",
color = "Method") +
theme_minimal()
}
coefplotsmooth2(ages = ages,start = start,stop = stop,modelfit = f,window_width = 20,span = 0.3,degree = 2)
coefplotsmooth2(ages = ages,start = start,stop = stop,modelfit = f,window_width = 20,span = 0.3,degree = 2)
coefplotsmooth2 = function(ages,
start,
stop,
modelfit,
window_width = 10,
span = 0.2,
degree = 2) {
require(ggplot2)
agenames = as.character(c(ages))
s = sapply(agenames, function(x) {
modelfit$model_list[[x]][[stop]][[start]][, "Estimate"]
})
s = t(s)
e = sapply(agenames, function(x) {
modelfit$model_list[[x]][[stop]][[start]][, "Std. Error"]
})
e = t(e)
rownames(s) = rownames(e) = agenames
smoothing_results <-
apply_smoothing(
ages = ages,
coefficients = s,
standard_errors = e,
window_width = window_width,
degree = degree,
span = span
)
g = plot_coef(ages = ages,coefficients = s,smoothing_results = smoothing_results,standard_errors = e) +
ggtitle(paste0(start, "_to_", stop, "_Coefficients"))
w = smoothing_results$standard_loess_weighted
m = smoothing_results$custom_loess
colnames(m) = colnames(s)
rownames(m) = ages
return(list(
"custom_smooth" = m,
"weighted" = w,
"plot" = g,
"errors" = e,
"unsmoothed_coefficients" = s
))
}
coefplotsmooth2(ages = ages,start = start,stop = stop,modelfit = f,window_width = 20,span = 0.3,degree = 2)
runApp('~/testapp')
library(ggplot2)
library(shiny)
source("smoothtest.R")
runApp('~/testapp')
coefplotsmooth2(
ages = ages,
start = input$start,
stop = input$stop,
modelfit = modelfit,
window_width = input$window_width,
span = input$span,
degree = input$degree
)
runApp('~/testapp')
runApp('~/testapp')
custom_loess
